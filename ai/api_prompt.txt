Cześć! Pracujemy nad projektem Fishio – aplikacją webową dla wędkarzy. Chciałbym, abyś pomógł mi w generowaniu kodu, przestrzegając poniższych wytycznych:
1. Struktura Projektu i Nazewnictwo Namespace:

Wszystkie generowane przestrzenie nazw (namespace) muszą zaczynać się od Fishio. (np. Fishio.Application.Fisheries.Commands, Fishio.Domain.Entities, Fishio.API.Endpoints).
Stosuj podział na warstwy: Fishio.Domain, Fishio.Application, Fishio.Infrastructure, Fishio.API (lub Fishio.Web).
2. Warstwa Aplikacji (Fishio.Application):

CQRS: Preferujemy podejście CQRS z MediatR.
Komendy (Commands):

Nazewnictwo: Używaj prefiksu Create dla komend tworzących (np. CreateFisheryCommand), Update dla aktualizujących, Delete dla usuwających.
Definicja: Możesz używać class lub record class (lub record) dla definicji komend (DTOs), w zależności od tego, co uznasz za bardziej odpowiednie dla danego przypadku (np. record dla prostych nośników danych, class dla większej elastyczności). Staraj się zachować spójność w ramach danej funkcjonalności.
Struktura plików:

Jeden plik dla definicji komendy i jej walidatora FluentValidation (np. CreateFisheryCommand.cs).
Drugi, osobny plik dla handlera MediatR tej komendy (np. CreateFisheryCommandHandler.cs).

Zapytania (Queries):

Podobnie, definiuj DTOs dla wyników zapytań.
Handlery zapytań.


Dostęp do Danych: W handlerach komend i zapytań nie używaj dedykowanych repozytoriów. Zamiast tego, korzystaj bezpośrednio z interfejsu Fishio.Application.Common.Interfaces.IApplicationDbContext.
Mapowanie: Unikaj użycia AutoMappera. Wszystkie mapowania z encji na DTOs i odwrotnie wykonuj ręcznie w odpowiednich miejscach (np. w handlerach).
Paginacja: Dla zapytań zwracających listy, implementuj paginację używając poniższego modelu PaginatedList<T> i jego metody CreateAsync.
csharp// Fishio.Application.Common.Models.PaginatedList<T>
namespace Fishio.Application.Common.Models;

public class PaginatedList<T>
{
    public IReadOnlyCollection<T> Items { get; }
    public int PageNumber { get; }
    public int TotalPages { get; }
    public int TotalCount { get; }

    public PaginatedList(IReadOnlyCollection<T> items, int count, int pageNumber, int pageSize)
    {
        PageNumber = pageNumber;
        TotalPages = (int)Math.Ceiling(count / (double)pageSize);
        TotalCount = count;
        Items = items;
    }

    public bool HasPreviousPage => PageNumber > 1;
    public bool HasNextPage => PageNumber < TotalPages;

    public static async Task<PaginatedList<T>> CreateAsync(IQueryable<T> source, int pageNumber, int pageSize)
    {
        var count = await source.CountAsync(); // Wymaga Microsoft.EntityFrameworkCore
        var items = await source.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToListAsync(); // Wymaga Microsoft.EntityFrameworkCore
        return new PaginatedList<T>(items, count, pageNumber, pageSize);
    }
}


Walidacja: Używaj FluentValidation dla komend.
3. Warstwa API (Fishio.API lub Fishio.Web):

Minimal APIs: Endpointy definiuj przy użyciu Minimal APIs.
Struktura Endpointów:

Grupuj endpointy za pomocą MapGroup("/api/nazwa-zasobu").
Dodawaj .WithTags("NazwaTagu"), .WithOpenApi().
Domyślnie stosuj .RequireAuthorization() na poziomie grupy, chyba że endpoint ma być publiczny.
Definiuj prywatne, statyczne metody asynchroniczne jako handlery dla endpointów.
Używaj ISender (MediatR) do wysyłania komend/zapytań.
Dla zapytań GET z parametrami, używaj [AsParameters].
Dla komend z IFormFile (np. upload obrazu), używaj [FromForm].
Zwracaj wyniki za pomocą TypedResults (np. TypedResults.Ok(), TypedResults.Created()).
Nadawaj nazwy endpointom: .WithName(nameof(NazwaMetodyHandlera)).
Definiuj zwracane typy i kody statusu: .Produces<Typ>(StatusCodes.XXX).


4. Nazewnictwo Związane z Obrazami:

Używaj terminu Image zamiast Photo w nazwach pól, zmiennych, parametrów i DTOs (np. IFormFile? Image, ImageUrl).
Interfejs do obsługi przechowywania obrazów powinien nazywać się Fishio.Application.Common.Interfaces.Services.IImageStorageService, a model wyniku ImageUploadResult.
5. Ogólne:

Staraj się generować kompletne pliki, włączając potrzebne using statements.
Zwracaj uwagę na komentarze i TODOs, które mogą się pojawić w istniejącym kodzie.
Jeśli masz wątpliwości co do jakiejś konwencji, zapytaj.
Pamiętaj, że celem jest stworzenie czystego, spójnego i łatwego w utrzymaniu kodu. Dziękuję za pomoc!