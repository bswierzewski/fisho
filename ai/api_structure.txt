# Fishio Application Schema (Clean Architecture with .NET Minimal API)

## 1. Główne Założenia Projektu

- **Nazwa Aplikacji:** Fishio
- **Cel:** Platforma webowa (zoptymalizowana mobilnie) do organizacji i uczestnictwa w zawodach wędkarskich oraz prowadzenia osobistego rejestru połowów.
- **Architektura:** Clean Architecture
- **Backend:** .NET 9 (Minimal API)
- **Frontend:** Next.js (React, TypeScript, App Router) - *nieobjęty tym schematem backendu*
- **Baza Danych:** PostgreSQL (produkcja), SQLite (dewelopment)
- **Uwierzytelnianie:** Clerk
- **Główne Funkcjonalności (MVP+):**
    - Zarządzanie Zawodami (tworzenie, przeglądanie, szczegóły)
    - Zarządzanie Uczestnikami i Rolami w Zawodach (dołączanie, dodawanie gości, role Organizator/Sędzia/Uczestnik)
    - Rejestracja Połowów w Zawodach (przez Sędziego)
    - Publiczna Strona Wyników Zawodów (dynamiczna w zależności od statusu)
    - Osobisty Dziennik Połowów (rejestracja, przeglądanie)
    - Zarządzanie Łowiskami (dodawanie, przeglądanie, przypisywanie gatunków ryb)
    - Dashboard użytkownika
    - Strona "O Aplikacji"

## 2. Struktura Projektu (Foldery i Kluczowe Pliki)

Fishio/
├── api/                           # Główny projekt API
│   ├── src/
│   │   ├── Domain/                # Warstwa Domenowa
│   │   │   ├── Common/
│   │   │   │   ├── BaseEntity.cs           # Bazowa klasa dla encji z Id i DomainEvents
│   │   │   │   ├── BaseAuditableEntity.cs  # Bazowa klasa dla encji z polami audytu
│   │   │   │   └── BaseEvent.cs            # Bazowa klasa dla zdarzeń domenowych
│   │   │   ├── Entities/
│   │   │   │   ├── User.cs                 # Encja użytkownika (z ClerkUserId)
│   │   │   │   ├── Fishery.cs              # Encja łowiska
│   │   │   │   ├── Competition.cs          # Encja zawodów
│   │   │   │   ├── FishSpecies.cs          # Encja gatunku ryby
│   │   │   │   ├── CompetitionCategory.cs  # Encja kategorii zawodów
│   │   │   │   ├── CompetitionFishCatch.cs # Encja połowu w zawodach
│   │   │   │   ├── CompetitionParticipant.cs # Encja uczestnika zawodów
│   │   │   │   ├── CategoryDefinition.cs   # Encja definicji kategorii
│   │   │   │   └── LogbookEntry.cs         # Encja wpisu w dzienniku
│   │   │   ├── Enums/
│   │   │   │   ├── ParticipantRole.cs      # Role uczestników (Organizer, Judge, Competitor, Guest)
│   │   │   │   ├── CompetitionStatus.cs    # Statusy zawodów (Draft, PendingApproval, etc.)
│   │   │   │   ├── CategoryType.cs         # Typy kategorii (MainScoring, SpecialAchievement, etc.)
│   │   │   │   ├── CategoryMetric.cs       # Metryki kategorii (LengthCm, WeightKg, etc.)
│   │   │   │   ├── CompetitionType.cs      # Typy zawodów (Public, Private)
│   │   │   │   ├── CategoryCalculationLogic.cs # Logika kalkulacji kategorii
│   │   │   │   └── CategoryEntityType.cs   # Typy encji dla kategorii
│   │   │   ├── Events/
│   │   │   │   └── LogbookEntryCreatedEvent.cs # Zdarzenie utworzenia wpisu w dzienniku
│   │   │   ├── Constants/                  # (Puste)
│   │   │   ├── Interfaces/                 # (Puste)
│   │   │   ├── ValueObjects/               # (Puste)
│   │   │   ├── Exceptions/                 # (Puste)
│   │   │   ├── GlobalUsings.cs             # Globalne using directives
│   │   │   └── Domain.csproj               # Projekt domenowy
│   │   │
│   │   ├── Application/                    # Warstwa Aplikacji
│   │   │   ├── Common/
│   │   │   │   ├── Behaviors/              # Zachowania MediatR
│   │   │   │   ├── Exceptions/             # Wyjątki aplikacji
│   │   │   │   ├── Interfaces/             # Interfejsy aplikacji
│   │   │   │   └── Mappings/               # Mapowania AutoMapper
│   │   │   ├── Competitions/               # Funkcjonalność: Zawody
│   │   │   │   ├── Commands/
│   │   │   │   │   ├── CreateCompetition/
│   │   │   │   │   ├── AddParticipant/
│   │   │   │   │   ├── AssignJudgeRole/
│   │   │   │   │   ├── JoinCompetition/
│   │   │   │   │   ├── RecordFishCatch/
│   │   │   │   │   ├── RemoveParticipant/
│   │   │   │   │   └── RevokeJudgeRole/
│   │   │   │   └── Queries/
│   │   │   │       ├── GetCompetitionDetails/
│   │   │   │       ├── ListCompetitions/
│   │   │   │       ├── ListCompetitionParticipants/
│   │   │   │       ├── ListMyCompetitions/
│   │   │   │       └── ListCompetitionCatches/
│   │   │   ├── Dashboard/
│   │   │   │   └── Queries/
│   │   │   │       └── GetDashboardData/
│   │   │   ├── Fisheries/
│   │   │   │   ├── Commands/
│   │   │   │   │   ├── CreateFishery/
│   │   │   │   │   └── UpdateFishery/
│   │   │   │   └── Queries/
│   │   │   │       ├── GetFisheryDetails/
│   │   │   │       └── ListFisheries/
│   │   │   ├── Logbook/
│   │   │   │   ├── Commands/
│   │   │   │   │   ├── CreateLogbookEntry/
│   │   │   │   │   ├── DeleteLogbookEntry/
│   │   │   │   │   └── UpdateLogbookEntry/
│   │   │   │   └── Queries/
│   │   │   │       ├── GetLogbookEntryDetails/
│   │   │   │       └── ListLogbookEntries/
│   │   │   ├── LookupData/
│   │   │   │   └── Queries/
│   │   │   │       ├── ListFishSpecies/
│   │   │   │       └── ListScoringCategories/
│   │   │   ├── PublicResults/
│   │   │   │   └── Queries/
│   │   │   │       └── GetPublicCompetitionResults/
│   │   │   ├── Users/
│   │   │   │   └── Queries/
│   │   │   │       └── SearchUsers/
│   │   │   ├── About/
│   │   │   │   └── Queries/
│   │   │   │       └── GetApplicationInfo/
│   │   │   └── DependencyInjection.cs
│   │   │
│   │   ├── Infrastructure/                 # Warstwa Infrastruktury
│   │   │   ├── Persistence/
│   │   │   │   ├── ApplicationDbContext.cs
│   │   │   │   ├── Configurations/
│   │   │   │   │   └── CompetitionConfiguration.cs
│   │   │   │   ├── Migrations/
│   │   │   │   └── Repositories/
│   │   │   │       └── CompetitionRepository.cs
│   │   │   ├── Services/
│   │   │   │   ├── DateTimeService.cs
│   │   │   │   ├── CompetitionTokenGenerator.cs
│   │   │   │   └── CurrentUserService.cs
│   │   │   ├── Identity/
│   │   │   └── DependencyInjection.cs
│   │   │
│   │   └── Api/                            # Warstwa Prezentacji
│   │       ├── Endpoints/
│   │       │   ├── AboutEndpoints.cs
│   │       │   ├── CompetitionEndpoints.cs
│   │       │   ├── DashboardEndpoints.cs
│   │       │   ├── FisheryEndpoints.cs
│   │       │   ├── LogbookEndpoints.cs
│   │       │   ├── LookupDataEndpoints.cs
│   │       │   ├── PublicResultsEndpoints.cs
│   │       │   └── UserEndpoints.cs
│   │       ├── Middleware/
│   │       │   └── ExceptionHandlingMiddleware.cs
│   │       ├── Properties/
│   │       │   └── launchSettings.json
│   │       ├── appsettings.json
│   │       ├── appsettings.Development.json
│   │       ├── Api.csproj
│   │       └── Program.cs
│   │
│   └── tests/                              # Testy
│       ├── Domain.UnitTests/
│       ├── Application.UnitTests/
│       ├── Infrastructure.IntegrationTests/
│       └── Api.IntegrationTests/
│
└── Fishio.sln                              # Plik solucji

## 3. Przepływ Danych (Typowy Cykl Żądania/Odpowiedzi)

1.  **Żądanie HTTP:** Klient (np. frontend Next.js, Postman) wysyła żądanie HTTP do endpointu zdefiniowanego w `Fishio.Api` (np. `POST /api/competitions`).
2.  **Minimal API Endpoint (`Fishio.Api/Endpoints/`):**
    *   Endpoint odbiera żądanie.
    *   Dane z ciała żądania (JSON) są automatycznie bindowane do obiektu komendy MediatR (np. `CreateCompetitionCommand`), która jest zdefiniowana w `Fishio.Application`.
    *   Endpoint wstrzykuje `ISender` (MediatR) i wysyła komendę/zapytanie: `await mediator.Send(command);`.
3.  **MediatR Pipeline (`Fishio.Application/Common/Behaviors/`):**
    *   Żądanie przechodzi przez zdefiniowane zachowania (behaviors), np.:
        *   `LoggingBehavior`: Logowanie informacji o żądaniu.
        *   `ValidationBehavior`: Walidacja komendy przy użyciu FluentValidation (jeśli zaimplementowano). Jeśli walidacja zawiedzie, rzucany jest `ValidationException`.
        *   `PerformanceBehavior`: (Opcjonalnie) Mierzenie czasu wykonania.
4.  **Handler Komendy/Zapytania (`Fishio.Application/Features/.../`):**
    *   Odpowiedni handler (np. `CreateCompetitionCommandHandler`) odbiera żądanie.
    *   Handler wykonuje logikę biznesową:
        *   Może wchodzić w interakcję z encjami domenowymi (`Fishio.Domain/Entities/`).
        *   Może korzystać z serwisów domenowych lub aplikacyjnych (np. `ICompetitionTokenGenerator`, `ICurrentUserService`).
        *   Używa interfejsu `IApplicationDbContext` (z `Fishio.Domain`) do interakcji z bazą danych (operacje CRUD). Implementacja `IApplicationDbContext` znajduje się w `Fishio.Infrastructure`.
        *   W przypadku zapytań, handler może mapować encje na DTOs (np. `CompetitionDetailsDto`) i je zwracać.
5.  **Odpowiedź z Handlera:**
    *   Handler komendy może zwrócić np. ID utworzonego zasobu lub nic (`Unit`).
    *   Handler zapytania zwraca DTO z danymi.
6.  **Minimal API Endpoint (`Fishio.Api/Endpoints/`):**
    *   Endpoint otrzymuje wynik od MediatR.
    *   Formatuje odpowiedź HTTP (np. `TypedResults.Ok(dto)`, `TypedResults.CreatedAtRoute(...)`, `TypedResults.NoContent()`).
    *   Obsługuje wyjątki (np. `NotFoundException` mapowane na 404, `ValidationException` na 400 z listą błędów). Może to być realizowane przez globalny middleware (`ExceptionHandlingMiddleware.cs`).
7.  **Odpowiedź HTTP:** API wysyła odpowiedź HTTP do klienta.

## 4. Kluczowe Technologie i Koncepcje

-   **.NET 9 Minimal API:** Lekka i wydajna platforma do budowy API.
-   **Clean Architecture:** Podział na warstwy (Domain, Application, Infrastructure, Api) w celu separacji odpowiedzialności i testowalności.
-   **CQRS (Command Query Responsibility Segregation):** Rozdzielenie operacji zapisu (Komendy) od operacji odczytu (Zapytania) przy użyciu biblioteki **MediatR**.
-   **Entity Framework Core:** ORM do interakcji z bazą danych.
-   **Dependency Injection (DI):** Wbudowany mechanizm .NET do zarządzania zależnościami. Konfiguracja w `Program.cs` oraz plikach `DependencyInjection.cs` w każdej warstwie.
-   **DTOs (Data Transfer Objects):** Klasy komend/zapytań MediatR oraz klasy DTO zwracane przez zapytania służą jako kontrakt danych.
-   **Walidacja:** (Zalecane) FluentValidation dla walidacji komend/zapytań, zintegrowane z pipeline'em MediatR.
-   **Uwierzytelnianie i Autoryzacja:** Clerk dla uwierzytelniania. Autoryzacja oparta na rolach/politykach .NET.
-   **Mapowanie:** (Opcjonalnie) AutoMapper do mapowania między obiektami, jeśli potrzebne (np. encja -> DTO, jeśli DTO nie jest bezpośrednio tworzone przez projekcję EF Core).
-   **Testowanie:** Oddzielne projekty testowe dla każdej warstwy (jednostkowe, integracyjne).

## 5. Ważne Uwagi

-   **Niezmienniki Domenowe:** Logika walidacyjna i reguły biznesowe, które muszą być zawsze spełnione, powinny być egzekwowane w encjach domenowych (`Fishio.Domain`).
-   **Cienkie Kontrolery/Endpointy:** Endpointy w `Fishio.Api` powinny być jak najprostsze, delegując większość pracy do warstwy `Application` poprzez MediatR.
-   **Obsługa Błędów:** Spójna strategia obsługi błędów i zwracania odpowiednich kodów HTTP.
-   **Konfiguracja:** Użycie `appsettings.json` i zmiennych środowiskowych do konfiguracji.
-   **Logowanie:** Implementacja mechanizmu logowania (np. Serilog).

---

Ten schemat powinien dać Ci solidny przegląd struktury i działania aplikacji Fishio. Możesz go używać jako punktu odniesienia i rozwijać w miarę postępów prac. Powodzenia!
