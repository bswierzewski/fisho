// User.cs
namespace Fishio.Domain.Entities;

public class User : BaseAuditableEntity
{
    public string ClerkUserId { get; private set; } = string.Empty;
    public string Name { get; private set; } = string.Empty;
    public string? Email { get; private set; }
    public string? ImageUrl { get; private set; }

    public virtual ICollection<Competition> OrganizedCompetitions { get; private set; } = [];
    public virtual ICollection<CompetitionParticipant> CompetitionParticipations { get; private set; } = [];
    public virtual ICollection<CompetitionFishCatch> JudgedFishCatches { get; private set; } = [];
    public virtual ICollection<LogbookEntry> LogbookEntries { get; private set; } = [];
    public virtual ICollection<Fishery> CreatedFisheries { get; private set; } = [];

    private User() { }

    public User(string clerkUserId, string name, string? email, string? imageUrl)
    {
        Guard.Against.NullOrWhiteSpace(clerkUserId, nameof(clerkUserId));
        Guard.Against.NullOrWhiteSpace(name, nameof(name));

        ClerkUserId = clerkUserId;
        Name = name;
        Email = email;
        ImageUrl = imageUrl;

    }

    public void UpdateDetailsFromClerk(string newName, string? newEmail, string? imageUrl)
    {
        if (Name != newName && !string.IsNullOrWhiteSpace(newName))
            Name = newName;

        Email = newEmail;
        ImageUrl = imageUrl;
    }
}

// Fishery.cs
namespace Fishio.Domain.Entities;

public class Fishery : BaseAuditableEntity
{
    public string Name { get; private set; } = string.Empty;
    public string? ImageUrl { get; private set; }
    public string? Location { get; private set; }

    /// <summary>
    /// Creator/Maintainer of this fishery entry
    /// </summary>
    public int? UserId { get; private set; }
    public virtual User? User { get; private set; }

    public virtual ICollection<LogbookEntry> LogbookEntries { get; private set; } = [];
    public virtual ICollection<FishSpecies> FishSpecies { get; private set; } = [];
    public virtual ICollection<Competition> Competitions { get; private set; } = [];

    private Fishery() { }

    public Fishery(int userId, string name, string? imageUrl, string? location)
    {
        Guard.Against.NullOrWhiteSpace(name, nameof(name), "Nazwa łowiska jest wymagana.");

        Name = name;
        UserId = userId;
        Location = location;
        ImageUrl = imageUrl;
    }

    public void UpdateDetails(string name, string? imageUrl, string? location)
    {
        Guard.Against.NullOrWhiteSpace(name, nameof(name));
        Name = name;

        Location = location;
        ImageUrl = imageUrl;
    }

    public void AddSpecies(FishSpecies species)
    {
        if (!FishSpecies.Contains(species))
            FishSpecies.Add(species);
    }

    public void RemoveSpecies(FishSpecies species)
    {
        FishSpecies.Remove(species);
    }
}

// Competition.cs
namespace Fishio.Domain.Entities;

public class Competition : BaseAuditableEntity
{
    public string Name { get; private set; } = string.Empty;
    public DateTimeOffset StartTime { get; private set; }
    public DateTimeOffset EndTime { get; private set; }
    public string? Location { get; private set; }
    public string? Rules { get; private set; }
    public CompetitionType Type { get; private set; }
    public CompetitionStatus Status { get; private set; }
    public string? ImageUrl { get; private set; }
    public string ResultsToken { get; private set; } = string.Empty;

    public int OrganizerId { get; private set; }
    public virtual User Organizer { get; private set; } = null!;

    public int FisheryId { get; private set; }
    public virtual Fishery Fishery { get; private set; } = null!;

    public ICollection<CompetitionCategory> Categories { get; private set; } = [];
    public virtual ICollection<CompetitionParticipant> Participants { get; private set; } = [];
    public virtual ICollection<CompetitionFishCatch> FishCatches { get; private set; } = [];

    private Competition() { }
}

// FishSpecies.cs
namespace Fishio.Domain.Entities;

public class FishSpecies : BaseEntity
{
    public string Name { get; private set; } = string.Empty;

    public virtual ICollection<Fishery> Fisheries { get; private set; } = [];

    // Private constructor for EF Core
    private FishSpecies() { }

    public FishSpecies(string name)
    {
        Guard.Against.NullOrWhiteSpace(name, nameof(name), "Nazwa łowiska jest wymagana.");
        Guard.Against.LengthOutOfRange(name, 1, 255, "Nazwa łowiska musi mieć od 1 do 255 znaków.");
        Name = name;
    }
}

// CompetitionCategory.cs
namespace Fishio.Domain.Entities;

public class CompetitionCategory : BaseAuditableEntity
{

    public int CompetitionId { get; private set; }
    public Competition Competition { get; private set; } = null!;

    public int CategoryDefinitionId { get; private set; }
    public CategoryDefinition CategoryDefinition { get; private set; } = null!;

    public int? FishSpeciesId { get; private set; }
    public FishSpecies? FishSpecies { get; private set; }

    public string? CustomNameOverride { get; private set; }
    public string? CustomDescriptionOverride { get; private set; }
    public int SortOrder { get; private set; } = 0;
    public bool IsPrimaryScoring { get; private set; } = false;
    public int MaxWinnersToDisplay { get; private set; } = 1;
    public bool IsEnabled { get; private set; } = true;

    private CompetitionCategory() { }

    internal CompetitionCategory(
        int competitionId,
        int categoryDefinitionId,
        int? fishSpeciesId,
        string? customNameOverride,
        string? customDescriptionOverride,
        int sortOrder,
        bool isPrimaryScoring,
        int maxWinnersToDisplay,
        bool isEnabled)
    {
        Guard.Against.NegativeOrZero(competitionId, nameof(competitionId));
        Guard.Against.NegativeOrZero(categoryDefinitionId, nameof(categoryDefinitionId));
        Guard.Against.NegativeOrZero(maxWinnersToDisplay, nameof(maxWinnersToDisplay));

        CompetitionId = competitionId;
        CategoryDefinitionId = categoryDefinitionId;
        FishSpeciesId = fishSpeciesId;
        CustomNameOverride = customNameOverride;
        CustomDescriptionOverride = customDescriptionOverride;
        SortOrder = sortOrder;
        IsPrimaryScoring = isPrimaryScoring;
        MaxWinnersToDisplay = maxWinnersToDisplay;
        IsEnabled = isEnabled;
    }
}

// CompetitionFishCatch.cs
namespace Fishio.Domain.Entities;

public class CompetitionFishCatch : BaseAuditableEntity
{
    public int CompetitionId { get; private set; }
    public virtual Competition Competition { get; private set; } = null!;

    public int ParticipantId { get; private set; }
    public virtual CompetitionParticipant Participant { get; private set; } = null!;

    public int JudgeId { get; private set; }
    public virtual User Judge { get; private set; } = null!;

    public int FishSpeciesId { get; private set; }
    public virtual FishSpecies FishSpecies { get; private set; } = null!;

    /// <summary>
    /// The length of the fish in centimeters.
    /// </summary>
    public decimal? Length { get; private set; }
    /// <summary>
    /// The weight of the fish in kilograms.
    /// </summary>
    public decimal? Weight { get; private set; }
    public string ImageUrl { get; private set; } = string.Empty;
    public DateTimeOffset CatchTime { get; private set; } = DateTimeOffset.UtcNow;

    private CompetitionFishCatch() { }

    public CompetitionFishCatch(
        Competition competition,
        CompetitionParticipant participant,
        User judge,
        int fishSpeciesId,
        string imageUrl,
        DateTimeOffset catchTime)
    {
        Competition = competition;
        CompetitionId = competition.Id;
        Participant = participant;
        ParticipantId = participant.Id;
        Judge = judge;
        JudgeId = judge.Id;
        FishSpeciesId = fishSpeciesId;
        ImageUrl = imageUrl;
        CatchTime = catchTime;
    }
}

// CompetitionParticipant.cs
namespace Fishio.Domain.Entities;

/// <summary>
/// Represents a participant in a competition.
/// This can be a user or a guest.
/// The participant can have different roles such as competitor, judge, or organizer.
/// The participant can be added by the organizer or join on their own.
/// </summary>
public class CompetitionParticipant : BaseAuditableEntity
{
    public int CompetitionId { get; private set; }
    public virtual Competition Competition { get; private set; } = null!;

    public int? UserId { get; private set; }
    public virtual User? User { get; private set; }

    public string? GuestName { get; private set; }
    public string? GuestIdentifier { get; private set; }

    public ParticipantRole Role { get; private set; }
    public bool AddedByOrganizer { get; private set; }

    public virtual ICollection<CompetitionFishCatch> FishCatches { get; private set; } = [];

    private CompetitionParticipant() { }

    public CompetitionParticipant(Competition competition, User user, ParticipantRole role, bool addedByOrganizer)
    {
        Competition = competition;
        CompetitionId = competition.Id;
        User = user;
        UserId = user.Id;
        Role = role;
        AddedByOrganizer = addedByOrganizer;
    }

    public CompetitionParticipant(Competition competition, string guestName, ParticipantRole role, bool addedByOrganizer, string? guestIdentifier = null)
    {
        Competition = competition;
        CompetitionId = competition.Id;
        GuestName = guestName;
        GuestIdentifier = guestIdentifier;
        Role = role;
        AddedByOrganizer = addedByOrganizer;
    }
}

// CategoryDefinition.cs
public class CategoryDefinition : BaseAuditableEntity
{
    public string Name { get; private set; } = string.Empty;
    public string? Description { get; private set; }
    public bool IsGlobal { get; private set; }
    public CategoryType Type { get; private set; }
    public CategoryMetric Metric { get; private set; }
    public CategoryCalculationLogic CalculationLogic { get; private set; }
    public CategoryEntityType EntityType { get; private set; }
    public bool RequiresSpecificFishSpecies { get; private set; }
    public bool AllowManualWinnerAssignment { get; private set; }

    private CategoryDefinition() { }

    public CategoryDefinition(
        string name,
        string? description,
        bool isGlobal,
        CategoryType type,
        CategoryMetric metric,
        CategoryCalculationLogic calculationLogic,
        CategoryEntityType entityType,
        bool requiresSpecificFishSpecies,
        bool allowManualWinnerAssignment
        )
    {
        Guard.Against.NullOrWhiteSpace(name, nameof(name));

        Name = name;
        Description = description;
        IsGlobal = isGlobal;
        Type = type;
        Metric = metric;
        CalculationLogic = calculationLogic;
        EntityType = entityType;
        RequiresSpecificFishSpecies = requiresSpecificFishSpecies;
        AllowManualWinnerAssignment = allowManualWinnerAssignment;
    }
}

// LogbookEntry.cs
using Fishio.Domain.Events;

namespace Fishio.Domain.Entities;

public class LogbookEntry : BaseAuditableEntity
{
    public int UserId { get; private set; }
    public virtual User User { get; private set; } = null!;

    public string ImageUrl { get; private set; } = string.Empty;
    public DateTimeOffset CatchTime { get; private set; } = DateTimeOffset.UtcNow;

    /// <summary>
    /// Długość ryby w centymetrach.
    /// </summary>
    public decimal? Length { get; private set; }

    /// <summary>
    /// Waga ryby w kilogramach.
    /// </summary>
    public decimal? Weight { get; private set; }
    public string? Notes { get; private set; }

    public int? FishSpeciesId { get; private set; }
    public virtual FishSpecies? FishSpecies { get; private set; }

    public int? FisheryId { get; private set; }
    public virtual Fishery? Fishery { get; private set; }

    // Private constructor for EF Core
    private LogbookEntry() { }

    // Konstruktor do tworzenia nowego wpisu w dzienniku
    public LogbookEntry(
        int userId,
        string? imageUrl,
        DateTimeOffset? catchTime,
        decimal? length = null,
        decimal? weight = null,
        string? notes = null,
        int? fishSpeciesId = null,
        int? fisheryId = null)
    {
        Guard.Against.NegativeOrZero(userId, nameof(userId), "Id użytkownika jest wymagane.");
        Guard.Against.NullOrWhiteSpace(imageUrl, nameof(imageUrl), "URL zdjęcia jest wymagany.");

        if (catchTime > DateTimeOffset.UtcNow.AddHours(1))
            throw new ArgumentOutOfRangeException(nameof(catchTime), "Czas połowu nie może być znacznie w przyszłości.");

        if (length.HasValue)
        {
            Guard.Against.NegativeOrZero(length.Value, nameof(length), "Długość musi być wartością dodatnią.");
            Guard.Against.OutOfRange(length.Value, nameof(length), 0.1m, 9999.99m, "Długość poza dopuszczalnym zakresem."); // Przykładowy zakres
        }

        if (weight.HasValue)
        {
            Guard.Against.NegativeOrZero(weight.Value, nameof(weight), "Waga musi być wartością dodatnią.");
            Guard.Against.OutOfRange(weight.Value, nameof(weight), 0.001m, 9999.999m, "Waga poza dopuszczalnym zakresem."); // Przykładowy zakres
        }

        if (fisheryId.HasValue)
            Guard.Against.NegativeOrZero(fisheryId.Value, nameof(fisheryId), "Id łowiska musi być wartością dodatnią.");

        UserId = userId;
        FishSpeciesId = fishSpeciesId;
        CatchTime = catchTime ?? DateTimeOffset.UtcNow;
        ImageUrl = imageUrl;
        Length = length;
        Weight = weight;
        Notes = notes;
        FisheryId = fisheryId;

        AddDomainEvent(new LogbookEntryCreatedEvent(this));
    }
} 

// BaseEntity.cs
using System.ComponentModel.DataAnnotations.Schema;

namespace Fishio.Domain.Common;

public abstract class BaseEntity
{
    public int Id { get; set; }

    private readonly List<BaseEvent> _domainEvents = new();

    [NotMapped]
    public IReadOnlyCollection<BaseEvent> DomainEvents => _domainEvents.AsReadOnly();

    public void AddDomainEvent(BaseEvent domainEvent)
    {
        _domainEvents.Add(domainEvent);
    }

    public void RemoveDomainEvent(BaseEvent domainEvent)
    {
        _domainEvents.Remove(domainEvent);
    }

    public void ClearDomainEvents()
    {
        _domainEvents.Clear();
    }
}

// BaseAuditableEntity.cs
namespace Fishio.Domain.Common;

public abstract class BaseAuditableEntity : BaseEntity
{
    public DateTimeOffset Created { get; set; }

    public int? CreatedBy { get; set; }

    public DateTimeOffset LastModified { get; set; }

    public int? LastModifiedBy { get; set; }
}

// BaseEvent.cs
using MediatR;

namespace Fishio.Domain.Common;

public abstract class BaseEvent : INotification
{
} 