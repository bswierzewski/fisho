// CompetitionFishCatchConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class CompetitionFishCatchConfiguration : IEntityTypeConfiguration<CompetitionFishCatch>
{
      public void Configure(EntityTypeBuilder<CompetitionFishCatch> builder)
      {
            builder.Property(e => e.ImageUrl).IsRequired();
            builder.Property(e => e.FishSpeciesId).IsRequired();
            builder.Property(e => e.Length).HasColumnType("decimal(6, 2)");
            builder.Property(e => e.Weight).HasColumnType("decimal(7, 3)");

            builder.HasOne(d => d.Competition)
                  .WithMany(p => p.FishCatches)
                  .HasForeignKey(d => d.CompetitionId)
                  .OnDelete(DeleteBehavior.Cascade); // Jeśli usuniemy zawody, usuwamy zgłoszenia

            builder.HasOne(d => d.Participant)
                  .WithMany(p => p.FishCatches)
                  .HasForeignKey(d => d.ParticipantId)
                  .OnDelete(DeleteBehavior.Cascade); // Jeśli usuniemy uczestnika z zawodów, usuwamy jego zgłoszenia

            builder.HasOne(d => d.Judge)
                  .WithMany(p => p.JudgedFishCatches)
                  .HasForeignKey(d => d.JudgeId)
                  .OnDelete(DeleteBehavior.Restrict); // Nie usuwaj sędziego, jeśli ma zgłoszenia

            builder.HasOne(d => d.FishSpecies)
                    .WithMany()
                    .HasForeignKey(d => d.FishSpeciesId)
                    .OnDelete(DeleteBehavior.Restrict); // Nie usuwaj gatunku, jeśli istnieją zgłoszenia połowów tego gatunku
    }
}

// LogbookEntryConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class LogbookEntryConfiguration : IEntityTypeConfiguration<LogbookEntry>
{
    public void Configure(EntityTypeBuilder<LogbookEntry> builder)
    {
        builder.Property(e => e.ImageUrl).IsRequired();
        builder.Property(e => e.Length).HasColumnType("decimal(6, 2)");
        builder.Property(e => e.Weight).HasColumnType("decimal(7, 3)");

        builder.HasOne(d => d.User)
            .WithMany(p => p.LogbookEntries)
            .HasForeignKey(d => d.UserId)
            .OnDelete(DeleteBehavior.Cascade); // Jeśli usuniemy użytkownika, usuwamy jego wpisy

        builder.HasOne(d => d.Fishery)
              .WithMany(p => p.LogbookEntries)
              .HasForeignKey(d => d.FisheryId)
              .IsRequired(false)
              .OnDelete(DeleteBehavior.SetNull); // Jeśli usuniemy łowisko,
    }
}

// CompetitionCategoryConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class CompetitionCategoryConfiguration : IEntityTypeConfiguration<CompetitionCategory>
{
    public void Configure(EntityTypeBuilder<CompetitionCategory> builder)
    {
        builder.HasKey(cc => cc.Id);

        builder.Property(cc => cc.CustomNameOverride).HasMaxLength(255);
        builder.Property(cc => cc.CustomDescriptionOverride).HasColumnType("text");

        builder.HasOne(cc => cc.CategoryDefinition)
            .WithMany()
            .HasForeignKey(cc => cc.CategoryDefinitionId)
            .IsRequired()
            .OnDelete(DeleteBehavior.Restrict); // If we delete the category definition, we don't want to delete the competition category. We want to keep the competition category for historical reasons. We can still delete the competition category if we want to.
    }
}

// CompetitionConfiguration.cs
using Fishio.Domain.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class CompetitionConfiguration : IEntityTypeConfiguration<Competition>
{
    public void Configure(EntityTypeBuilder<Competition> builder)
    {
        builder.HasKey(c => c.Id);

        builder.Property(c => c.Name)
            .HasMaxLength(255)
            .IsRequired();

        builder.Property(c => c.ResultsToken)
            .HasMaxLength(64)
            .IsRequired();
        builder.HasIndex(c => c.ResultsToken).IsUnique();

        builder.Property(c => c.Location).HasColumnType("text");
        builder.Property(c => c.Rules).HasColumnType("text");
        builder.Property(c => c.ImageUrl).HasColumnType("text");

        builder.Property(c => c.Type)
            .HasConversion(new EnumToStringConverter<CompetitionType>());

        builder.Property(c => c.Status)
            .HasConversion(new EnumToStringConverter<CompetitionStatus>());

        builder.HasOne(c => c.Organizer)
            .WithMany()
            .HasForeignKey(c => c.OrganizerId)
            .OnDelete(DeleteBehavior.Cascade); // Jeśli usuniemy organizatora, jego zawody też

    }
}

// CompetitionParticipantConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class CompetitionParticipantConfiguration : IEntityTypeConfiguration<CompetitionParticipant>
{
    public void Configure(EntityTypeBuilder<CompetitionParticipant> builder)
    {
        builder.Property(e => e.Role).IsRequired().HasMaxLength(50);
        builder.HasIndex(e => new { e.CompetitionId, e.UserId }).IsUnique().HasFilter("\"UserId\" IS NOT NULL");
        builder.HasIndex(e => new { e.CompetitionId, e.GuestIdentifier }).IsUnique().HasFilter("\"GuestIdentifier\" IS NOT NULL");

        builder.HasOne(d => d.Competition)
            .WithMany(p => p.Participants)
            .HasForeignKey(d => d.CompetitionId)
            .OnDelete(DeleteBehavior.Cascade); // If we delete the competition, we delete the participants
    }
}

// UserConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class UserConfiguration : IEntityTypeConfiguration<User>
{
    public void Configure(EntityTypeBuilder<User> builder)
    {
        builder.HasIndex(e => e.ClerkUserId).IsUnique();
        builder.Property(e => e.Name).IsRequired().HasMaxLength(255);
        builder.Property(e => e.Email).HasMaxLength(255);

        // Unique email if not null
        builder.HasIndex(e => e.Email).IsUnique().HasFilter("\"Email\" IS NOT NULL");
    }
}

// FisheryConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class FisheryConfiguration : IEntityTypeConfiguration<Fishery>
{
    public void Configure(EntityTypeBuilder<Fishery> builder)
    {
        builder.Property(e => e.Name).IsRequired().HasMaxLength(255);
    }
}

// FishSpeciesConfiguration.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class FishSpeciesConfiguration : IEntityTypeConfiguration<FishSpecies>
{
    public void Configure(EntityTypeBuilder<FishSpecies> builder)
    {
        builder.HasKey(fs => fs.Id);

        builder.Property(e => e.Name)
            .IsRequired()
            .HasMaxLength(255);

        builder.HasIndex(e => e.Name)
            .IsUnique();

        builder.HasData(
            new FishSpecies("Szczupak") { Id = 1 },
            new FishSpecies("Okoń") { Id = 2 },
            new FishSpecies("Sandacz") { Id = 3 },
            new FishSpecies("Karp") { Id = 4 },
            new FishSpecies("Leszcz") { Id = 5 },
            new FishSpecies("Płoć") { Id = 6 },
            new FishSpecies("Lin") { Id = 7 },
            new FishSpecies("Sum") { Id = 8 },
            new FishSpecies("Węgorz") { Id = 9 },
            new FishSpecies("Pstrąg potokowy") { Id = 10 }
        );
    }
}

// CategoryDefinitionConfiguration.cs
using Fishio.Domain.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fishio.Infrastructure.Persistence.Configurations;

public class CategoryDefinitionConfiguration : IEntityTypeConfiguration<CategoryDefinition>
{
    public void Configure(EntityTypeBuilder<CategoryDefinition> builder)
    {
        builder.HasKey(cd => cd.Id);

        builder.Property(cd => cd.Name)
            .HasMaxLength(255)
            .IsRequired();

        builder.Property(cd => cd.Description).HasColumnType("text");

        builder.Property(cd => cd.Type)
            .HasConversion(new EnumToStringConverter<CategoryType>());

        builder.Property(cd => cd.Metric)
            .HasConversion(new EnumToStringConverter<CategoryMetric>());

        builder.Property(cd => cd.CalculationLogic)
            .HasConversion(new EnumToStringConverter<CategoryCalculationLogic>());

        builder.Property(cd => cd.EntityType)
            .HasConversion(new EnumToStringConverter<CategoryEntityType>());

        // --- HasData ---
        builder.HasData(
            // --- GŁÓWNE KATEGORIE PUNKTACYJNE ---
            new CategoryDefinition(
                name: "Najdłuższa Ryba (Indywidualnie)",
                description: "Zwycięzcą zostaje uczestnik, który złowił rybę o największej długości.",
                isGlobal: true,
                type: CategoryType.MainScoring,
                metric: CategoryMetric.LengthCm,
                calculationLogic: CategoryCalculationLogic.MaxValue,
                entityType: CategoryEntityType.FishCatch,
                requiresSpecificFishSpecies: false,
                allowManualWinnerAssignment: false
            )
            { Id = 1 },

            new CategoryDefinition(
                name: "Najcięższa Ryba (Indywidualnie)",
                description: "Zwycięzcą zostaje uczestnik, który złowił rybę o największej wadze.",
                isGlobal: true,
                type: CategoryType.MainScoring,
                metric: CategoryMetric.WeightKg,
                calculationLogic: CategoryCalculationLogic.MaxValue,
                entityType: CategoryEntityType.FishCatch,
                requiresSpecificFishSpecies: false,
                allowManualWinnerAssignment: false
            )
            { Id = 2 },

            new CategoryDefinition(
                name: "Suma Długości Złowionych Ryb",
                description: "Zwycięzcą zostaje uczestnik z największą sumą długości wszystkich swoich złowionych ryb.",
                isGlobal: true,
                type: CategoryType.MainScoring,
                metric: CategoryMetric.LengthCm,
                calculationLogic: CategoryCalculationLogic.SumValue,
                entityType: CategoryEntityType.ParticipantAggregateCatches,
                requiresSpecificFishSpecies: false,
                allowManualWinnerAssignment: false
            )
            { Id = 3 },

            new CategoryDefinition(
                name: "Suma Wag Złowionych Ryb",
                description: "Zwycięzcą zostaje uczestnik z największą sumą wag wszystkich swoich złowionych ryb.",
                isGlobal: true,
                type: CategoryType.MainScoring,
                metric: CategoryMetric.WeightKg,
                calculationLogic: CategoryCalculationLogic.SumValue,
                entityType: CategoryEntityType.ParticipantAggregateCatches,
                requiresSpecificFishSpecies: false,
                allowManualWinnerAssignment: false
            )
            { Id = 4 },

            new CategoryDefinition(
                name: "Liczba Złowionych Ryb",
                description: "Zwycięzcą zostaje uczestnik, który złowił najwięcej ryb (sztuk).",
                isGlobal: true,
                type: CategoryType.MainScoring,
                metric: CategoryMetric.FishCount,
                calculationLogic: CategoryCalculationLogic.SumValue, // Suma "1" za każdą rybę
                entityType: CategoryEntityType.ParticipantAggregateCatches,
                requiresSpecificFishSpecies: false,
                allowManualWinnerAssignment: false
            )
            { Id = 5 },

            // --- KATEGORIE SPECJALNE / OSIĄGNIĘCIA ---
            new CategoryDefinition(
                name: "Największa Ryba Zawodów (Gatunek Dowolny)",
                description: "Nagroda za największą (najdłuższą lub najcięższą - do ustalenia przez organizatora) rybę zawodów, niezależnie od gatunku.",
                isGlobal: true,
                type: CategoryType.SpecialAchievement,
                metric: CategoryMetric.NotApplicable, // Organizator wybierze czy długość czy waga
                calculationLogic: CategoryCalculationLogic.ManualAssignment, // Na MVP, potem można zautomatyzować
                entityType: CategoryEntityType.FishCatch,
                requiresSpecificFishSpecies: false,
                allowManualWinnerAssignment: true
            )
            { Id = 10 },

            new CategoryDefinition(
                name: "Największa Ryba Określonego Gatunku",
                description: "Nagroda za największą rybę wybranego gatunku (np. Największy Szczupak). Gatunek wybierany przy dodawaniu kategorii do zawodów.",
                isGlobal: true,
                type: CategoryType.SpecialAchievement,
                metric: CategoryMetric.NotApplicable, // Długość/waga zależy od wyboru przy konfiguracji zawodów
                calculationLogic: CategoryCalculationLogic.ManualAssignment,  // Na MVP
                entityType: CategoryEntityType.FishCatch,
                requiresSpecificFishSpecies: true, // Kluczowe!
                allowManualWinnerAssignment: true
            )
            { Id = 11 },

            new CategoryDefinition(
                name: "Pierwsza Złowiona Ryba Zawodów",
                description: "Nagroda dla uczestnika, który jako pierwszy zarejestruje połów.",
                isGlobal: true,
                type: CategoryType.SpecialAchievement,
                metric: CategoryMetric.TimeOfCatch,
                calculationLogic: CategoryCalculationLogic.FirstOccurrence,
                entityType: CategoryEntityType.FishCatch,
                requiresSpecificFishSpecies: false, 
                allowManualWinnerAssignment: false  // System może to wyłonić
            )
            { Id = 12 },

            new CategoryDefinition(
                name: "Najmłodszy Uczestnik z Rybą",
                description: "Nagroda dla najmłodszego uczestnika, który złowił jakąkolwiek rybę.",
                isGlobal: true,
                type: CategoryType.FunChallenge,
                metric: CategoryMetric.NotApplicable,
                calculationLogic: CategoryCalculationLogic.ManualAssignment,  // Wymaga danych o wieku, na MVP manualnie
                entityType: CategoryEntityType.ParticipantProfile,
                requiresSpecificFishSpecies: false,
                allowManualWinnerAssignment: true
            )
            { Id = 13 },

            new CategoryDefinition(
                name: "Największa Różnorodność Gatunków",
                description: "Nagroda dla uczestnika, który złowił najwięcej różnych gatunków ryb.",
                isGlobal: true,
                type: CategoryType.SpecialAchievement,
                metric: CategoryMetric.SpeciesVariety,
                calculationLogic: CategoryCalculationLogic.MaxValue,
                entityType: CategoryEntityType.ParticipantAggregateCatches,
                requiresSpecificFishSpecies: false,
                allowManualWinnerAssignment: false  // System może to policzyć
            )
            { Id = 14 }
        );
    }
} 