namespace Domain.Entities;

// Plik: Competition.cs
public class Competition : BaseAuditableEntity
{
    public string Name { get; private set; } = string.Empty;
    public DateTimeOffset StartTime { get; private set; }
    public DateTimeOffset EndTime { get; private set; }
    public string? LocationText { get; private set; }
    public string? RulesText { get; private set; }
    public CompetitionType Type { get; private set; }
    public CompetitionStatus Status { get; private set; }
    public string? ImageUrl { get; private set; }
    public string ResultsToken { get; private set; } = string.Empty; // Generated automatically

    public int OrganizerId { get; private set; }
    public virtual User Organizer { get; private set; } = null!;

    public int? MainScoringCategoryId { get; private set; }
    public virtual ScoringCategoryOption? MainScoringCategory { get; private set; }

    // Navigation properties
    public virtual ICollection<CompetitionParticipant> Participants { get; private set; } = new List<CompetitionParticipant>();
    public virtual ICollection<CompetitionFishCatch> FishCatches { get; private set; } = new List<CompetitionFishCatch>();
    public virtual ICollection<SpecialCompetitionCategory> SpecialCategories { get; private set; } = new List<SpecialCompetitionCategory>();

    // Private constructor for EF Core
    private Competition() { }

    public Competition(
        string name,
        DateTimeOffset startTime,
        DateTimeOffset endTime,
        User organizer,
        CompetitionType type,
        string resultsToken)
    {
        Name = name;
        StartTime = startTime;
        EndTime = endTime;
        Organizer = organizer;
        OrganizerId = organizer.Id;
        Type = type;
        Status = DetermineInitialStatus(startTime);
        ResultsToken = resultsToken; // Should be generated by a service or in constructor
    }

    public void UpdateStatus()
    {
        var now = DateTimeOffset.UtcNow;
        if (Status == CompetitionStatus.Finished) return; // Cannot change from finished

        if (now < StartTime)
        {
            Status = CompetitionStatus.Upcoming;
        }
        else if (now >= StartTime && now <= EndTime)
        {
            Status = CompetitionStatus.Ongoing;
        }
        else // now > EndTime
        {
            Status = CompetitionStatus.Finished;
        }
    }

    private CompetitionStatus DetermineInitialStatus(DateTimeOffset startTime)
    {
        return DateTimeOffset.UtcNow < startTime ? CompetitionStatus.Upcoming : CompetitionStatus.Ongoing;
        // Note: Logic for 'Finished' status update might be handled by a background job or when results are finalized.
        // For simplicity, initial status is Upcoming or Ongoing. EndTime check will transition to Finished.
    }

    public void AddSpecialCategory(string name, string? description)
    {
        var category = new SpecialCompetitionCategory(this, name, description);
        SpecialCategories.Add(category);
    }
}
