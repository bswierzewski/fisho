// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250511213619_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("LocationText")
                        .HasColumnType("text");

                    b.Property<int?>("MainScoringCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer");

                    b.Property<string>("ResultsToken")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RulesText")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainScoringCategoryId");

                    b.HasIndex("ResultsToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Domain.Entities.CompetitionFishCatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("JudgeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<decimal?>("LengthCm")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("decimal(7, 3)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("JudgeId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("CompetitionFishCatches");
                });

            modelBuilder.Entity("Domain.Entities.CompetitionParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AddedByOrganizer")
                        .HasColumnType("boolean");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("GuestIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("GuestName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CompetitionId", "GuestIdentifier")
                        .IsUnique()
                        .HasFilter("\"GuestIdentifier\" IS NOT NULL");

                    b.HasIndex("CompetitionId", "UserId")
                        .IsUnique()
                        .HasFilter("\"UserId\" IS NOT NULL");

                    b.ToTable("CompetitionParticipants");
                });

            modelBuilder.Entity("Domain.Entities.FishSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FishSpecies");
                });

            modelBuilder.Entity("Domain.Entities.Fishery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("LocationText")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fisheries");
                });

            modelBuilder.Entity("Domain.Entities.LogbookEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("FisheryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<decimal?>("LengthCm")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("decimal(7, 3)");

                    b.HasKey("Id");

                    b.HasIndex("FisheryId");

                    b.HasIndex("UserId");

                    b.ToTable("LogbookEntries");
                });

            modelBuilder.Entity("Domain.Entities.ScoringCategoryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScoringCategoryOptions");
                });

            modelBuilder.Entity("Domain.Entities.SpecialCategoryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("SpecialCategoryOptions");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClerkUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClerkUserId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FishSpeciesFishery", b =>
                {
                    b.Property<int>("DefinedSpeciesId")
                        .HasColumnType("integer");

                    b.Property<int>("FisheriesId")
                        .HasColumnType("integer");

                    b.HasKey("DefinedSpeciesId", "FisheriesId");

                    b.HasIndex("FisheriesId");

                    b.ToTable("FishSpeciesFishery");
                });

            modelBuilder.Entity("Domain.Entities.Competition", b =>
                {
                    b.HasOne("Domain.Entities.ScoringCategoryOption", "MainScoringCategory")
                        .WithMany()
                        .HasForeignKey("MainScoringCategoryId");

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("OrganizedCompetitions")
                        .HasForeignKey("UserId");

                    b.Navigation("MainScoringCategory");
                });

            modelBuilder.Entity("Domain.Entities.CompetitionFishCatch", b =>
                {
                    b.HasOne("Domain.Entities.Competition", "Competition")
                        .WithMany("FishCatches")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Judge")
                        .WithMany("JudgedCatches")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CompetitionParticipant", "Participant")
                        .WithMany("FishCatches")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Judge");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Domain.Entities.CompetitionParticipant", b =>
                {
                    b.HasOne("Domain.Entities.Competition", "Competition")
                        .WithMany("Participants")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("CompetitionParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Competition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Fishery", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("CreatedFisheries")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.LogbookEntry", b =>
                {
                    b.HasOne("Domain.Entities.Fishery", "Fishery")
                        .WithMany("LogbookEntries")
                        .HasForeignKey("FisheryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("LogbookEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fishery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SpecialCategoryOption", b =>
                {
                    b.HasOne("Domain.Entities.Competition", null)
                        .WithMany("SelectedSpecialCategories")
                        .HasForeignKey("CompetitionId");
                });

            modelBuilder.Entity("FishSpeciesFishery", b =>
                {
                    b.HasOne("Domain.Entities.FishSpecies", null)
                        .WithMany()
                        .HasForeignKey("DefinedSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Fishery", null)
                        .WithMany()
                        .HasForeignKey("FisheriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Competition", b =>
                {
                    b.Navigation("FishCatches");

                    b.Navigation("Participants");

                    b.Navigation("SelectedSpecialCategories");
                });

            modelBuilder.Entity("Domain.Entities.CompetitionParticipant", b =>
                {
                    b.Navigation("FishCatches");
                });

            modelBuilder.Entity("Domain.Entities.Fishery", b =>
                {
                    b.Navigation("LogbookEntries");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("CompetitionParticipations");

                    b.Navigation("CreatedFisheries");

                    b.Navigation("JudgedCatches");

                    b.Navigation("LogbookEntries");

                    b.Navigation("OrganizedCompetitions");
                });
#pragma warning restore 612, 618
        }
    }
}
