// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517104254_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowManualWinnerAssignment")
                        .HasColumnType("boolean");

                    b.Property<string>("CalculationLogic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Metric")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("RequiresSpecificFishSpecies")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowManualWinnerAssignment = false,
                            CalculationLogic = "MaxValue",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Zwycięzcą zostaje uczestnik, który złowił rybę o największej długości.",
                            EntityType = "FishCatch",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "LengthCm",
                            Name = "Najdłuższa Ryba (Indywidualnie)",
                            RequiresSpecificFishSpecies = false,
                            Type = "MainScoring"
                        },
                        new
                        {
                            Id = 2,
                            AllowManualWinnerAssignment = false,
                            CalculationLogic = "MaxValue",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Zwycięzcą zostaje uczestnik, który złowił rybę o największej wadze.",
                            EntityType = "FishCatch",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "WeightKg",
                            Name = "Najcięższa Ryba (Indywidualnie)",
                            RequiresSpecificFishSpecies = false,
                            Type = "MainScoring"
                        },
                        new
                        {
                            Id = 3,
                            AllowManualWinnerAssignment = false,
                            CalculationLogic = "SumValue",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Zwycięzcą zostaje uczestnik z największą sumą długości wszystkich swoich złowionych ryb.",
                            EntityType = "ParticipantAggregateCatches",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "LengthCm",
                            Name = "Suma Długości Złowionych Ryb",
                            RequiresSpecificFishSpecies = false,
                            Type = "MainScoring"
                        },
                        new
                        {
                            Id = 4,
                            AllowManualWinnerAssignment = false,
                            CalculationLogic = "SumValue",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Zwycięzcą zostaje uczestnik z największą sumą wag wszystkich swoich złowionych ryb.",
                            EntityType = "ParticipantAggregateCatches",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "WeightKg",
                            Name = "Suma Wag Złowionych Ryb",
                            RequiresSpecificFishSpecies = false,
                            Type = "MainScoring"
                        },
                        new
                        {
                            Id = 5,
                            AllowManualWinnerAssignment = false,
                            CalculationLogic = "SumValue",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Zwycięzcą zostaje uczestnik, który złowił najwięcej ryb (sztuk).",
                            EntityType = "ParticipantAggregateCatches",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "FishCount",
                            Name = "Liczba Złowionych Ryb",
                            RequiresSpecificFishSpecies = false,
                            Type = "MainScoring"
                        },
                        new
                        {
                            Id = 10,
                            AllowManualWinnerAssignment = true,
                            CalculationLogic = "ManualAssignment",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Nagroda za największą (najdłuższą lub najcięższą - do ustalenia przez organizatora) rybę zawodów, niezależnie od gatunku.",
                            EntityType = "FishCatch",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "NotApplicable",
                            Name = "Największa Ryba Zawodów (Gatunek Dowolny)",
                            RequiresSpecificFishSpecies = false,
                            Type = "SpecialAchievement"
                        },
                        new
                        {
                            Id = 11,
                            AllowManualWinnerAssignment = true,
                            CalculationLogic = "ManualAssignment",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Nagroda za największą rybę wybranego gatunku (np. Największy Szczupak). Gatunek wybierany przy dodawaniu kategorii do zawodów.",
                            EntityType = "FishCatch",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "NotApplicable",
                            Name = "Największa Ryba Określonego Gatunku",
                            RequiresSpecificFishSpecies = true,
                            Type = "SpecialAchievement"
                        },
                        new
                        {
                            Id = 12,
                            AllowManualWinnerAssignment = false,
                            CalculationLogic = "FirstOccurrence",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Nagroda dla uczestnika, który jako pierwszy zarejestruje połów.",
                            EntityType = "FishCatch",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "TimeOfCatch",
                            Name = "Pierwsza Złowiona Ryba Zawodów",
                            RequiresSpecificFishSpecies = false,
                            Type = "SpecialAchievement"
                        },
                        new
                        {
                            Id = 13,
                            AllowManualWinnerAssignment = true,
                            CalculationLogic = "ManualAssignment",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Nagroda dla najmłodszego uczestnika, który złowił jakąkolwiek rybę.",
                            EntityType = "ParticipantProfile",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "NotApplicable",
                            Name = "Najmłodszy Uczestnik z Rybą",
                            RequiresSpecificFishSpecies = false,
                            Type = "FunChallenge"
                        },
                        new
                        {
                            Id = 14,
                            AllowManualWinnerAssignment = false,
                            CalculationLogic = "MaxValue",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Nagroda dla uczestnika, który złowił najwięcej różnych gatunków ryb.",
                            EntityType = "ParticipantAggregateCatches",
                            IsGlobal = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Metric = "SpeciesVariety",
                            Name = "Największa Różnorodność Gatunków",
                            RequiresSpecificFishSpecies = false,
                            Type = "SpecialAchievement"
                        });
                });

            modelBuilder.Entity("FishSpeciesFishery", b =>
                {
                    b.Property<int>("FishSpeciesId")
                        .HasColumnType("integer");

                    b.Property<int>("FisheriesId")
                        .HasColumnType("integer");

                    b.HasKey("FishSpeciesId", "FisheriesId");

                    b.HasIndex("FisheriesId");

                    b.ToTable("FishSpeciesFishery");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FisheryId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer");

                    b.Property<string>("ResultsToken")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Rules")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FisheryId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ResultsToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.CompetitionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryDefinitionId")
                        .HasColumnType("integer");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("CustomDescriptionOverride")
                        .HasColumnType("text");

                    b.Property<string>("CustomNameOverride")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("FishSpeciesId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryScoring")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("MaxWinnersToDisplay")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryDefinitionId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("FishSpeciesId");

                    b.ToTable("CompetitionCategories");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.CompetitionFishCatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("FishSpeciesId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JudgeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(7, 3)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("FishSpeciesId");

                    b.HasIndex("JudgeId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("CompetitionFishCatches");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.CompetitionParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AddedByOrganizer")
                        .HasColumnType("boolean");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("GuestIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("GuestName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CompetitionId", "GuestIdentifier")
                        .IsUnique()
                        .HasFilter("\"GuestIdentifier\" IS NOT NULL");

                    b.HasIndex("CompetitionId", "UserId")
                        .IsUnique()
                        .HasFilter("\"UserId\" IS NOT NULL");

                    b.ToTable("CompetitionParticipants");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.FishSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FishSpecies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Szczupak"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Okoń"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sandacz"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Karp"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leszcz"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Płoć"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Lin"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sum"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Węgorz"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pstrąg potokowy"
                        });
                });

            modelBuilder.Entity("Fishio.Domain.Entities.Fishery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fisheries");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.LogbookEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("FishSpeciesId")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.Property<int?>("FisheryId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(7, 3)");

                    b.HasKey("Id");

                    b.HasIndex("FishSpeciesId");

                    b.HasIndex("FisheryId");

                    b.HasIndex("UserId");

                    b.ToTable("LogbookEntries");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClerkUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClerkUserId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FishSpeciesFishery", b =>
                {
                    b.HasOne("Fishio.Domain.Entities.FishSpecies", null)
                        .WithMany()
                        .HasForeignKey("FishSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.Fishery", null)
                        .WithMany()
                        .HasForeignKey("FisheriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fishio.Domain.Entities.Competition", b =>
                {
                    b.HasOne("Fishio.Domain.Entities.Fishery", "Fishery")
                        .WithMany("Competitions")
                        .HasForeignKey("FisheryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.User", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.User", null)
                        .WithMany("OrganizedCompetitions")
                        .HasForeignKey("UserId");

                    b.Navigation("Fishery");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.CompetitionCategory", b =>
                {
                    b.HasOne("CategoryDefinition", "CategoryDefinition")
                        .WithMany()
                        .HasForeignKey("CategoryDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.Competition", "Competition")
                        .WithMany("Categories")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.FishSpecies", "FishSpecies")
                        .WithMany()
                        .HasForeignKey("FishSpeciesId");

                    b.Navigation("CategoryDefinition");

                    b.Navigation("Competition");

                    b.Navigation("FishSpecies");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.CompetitionFishCatch", b =>
                {
                    b.HasOne("Fishio.Domain.Entities.Competition", "Competition")
                        .WithMany("FishCatches")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.FishSpecies", "FishSpecies")
                        .WithMany()
                        .HasForeignKey("FishSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.User", "Judge")
                        .WithMany("JudgedFishCatches")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.CompetitionParticipant", "Participant")
                        .WithMany("FishCatches")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("FishSpecies");

                    b.Navigation("Judge");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.CompetitionParticipant", b =>
                {
                    b.HasOne("Fishio.Domain.Entities.Competition", "Competition")
                        .WithMany("Participants")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.User", "User")
                        .WithMany("CompetitionParticipations")
                        .HasForeignKey("UserId");

                    b.Navigation("Competition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.Fishery", b =>
                {
                    b.HasOne("Fishio.Domain.Entities.User", "User")
                        .WithMany("CreatedFisheries")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.LogbookEntry", b =>
                {
                    b.HasOne("Fishio.Domain.Entities.FishSpecies", "FishSpecies")
                        .WithMany()
                        .HasForeignKey("FishSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fishio.Domain.Entities.Fishery", "Fishery")
                        .WithMany("LogbookEntries")
                        .HasForeignKey("FisheryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Fishio.Domain.Entities.User", "User")
                        .WithMany("LogbookEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishSpecies");

                    b.Navigation("Fishery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.Competition", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("FishCatches");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.CompetitionParticipant", b =>
                {
                    b.Navigation("FishCatches");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.Fishery", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("LogbookEntries");
                });

            modelBuilder.Entity("Fishio.Domain.Entities.User", b =>
                {
                    b.Navigation("CompetitionParticipations");

                    b.Navigation("CreatedFisheries");

                    b.Navigation("JudgedFishCatches");

                    b.Navigation("LogbookEntries");

                    b.Navigation("OrganizedCompetitions");
                });
#pragma warning restore 612, 618
        }
    }
}
