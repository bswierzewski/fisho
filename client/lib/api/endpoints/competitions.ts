/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Fishio API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '../axios';
import type {
  AddParticipantCommand,
  AssignJudgeCommand,
  CancelCompetitionCommand,
  CompetitionDetailsDto,
  CompetitionSummaryDtoPaginatedList,
  CreateCompetitionCommand,
  GetOpenCompetitionsListParams,
  GetUserCompetitionsListParams,
  ProblemDetails,
  RecordCompetitionFishCatchCommand,
  UpdateCompetitionCategoryCommand,
  UpdateCompetitionCommand
} from '../models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const createNewCompetition = (
  createCompetitionCommand: CreateCompetitionCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (createCompetitionCommand.name !== undefined && createCompetitionCommand.name !== null) {
    formData.append(`name`, createCompetitionCommand.name);
  }
  if (createCompetitionCommand.startTime !== undefined) {
    formData.append(`startTime`, createCompetitionCommand.startTime);
  }
  if (createCompetitionCommand.endTime !== undefined) {
    formData.append(`endTime`, createCompetitionCommand.endTime);
  }
  if (createCompetitionCommand.fisheryId !== undefined) {
    formData.append(`fisheryId`, createCompetitionCommand.fisheryId.toString());
  }
  if (createCompetitionCommand.rules !== undefined && createCompetitionCommand.rules !== null) {
    formData.append(`rules`, createCompetitionCommand.rules);
  }
  if (createCompetitionCommand.type !== undefined) {
    formData.append(`type`, createCompetitionCommand.type.toString());
  }
  if (createCompetitionCommand.image !== undefined && createCompetitionCommand.image !== null) {
    formData.append(`image`, createCompetitionCommand.image);
  }
  if (createCompetitionCommand.primaryScoringCategoryDefinitionId !== undefined) {
    formData.append(
      `primaryScoringCategoryDefinitionId`,
      createCompetitionCommand.primaryScoringCategoryDefinitionId.toString()
    );
  }
  if (
    createCompetitionCommand.primaryScoringFishSpeciesId !== undefined &&
    createCompetitionCommand.primaryScoringFishSpeciesId !== null
  ) {
    formData.append(`primaryScoringFishSpeciesId`, createCompetitionCommand.primaryScoringFishSpeciesId.toString());
  }
  if (createCompetitionCommand.specialCategories !== undefined && createCompetitionCommand.specialCategories !== null) {
    createCompetitionCommand.specialCategories.forEach((value) =>
      formData.append(`specialCategories`, JSON.stringify(value))
    );
  }

  return customInstance<unknown>(
    {
      url: `/api/competitions`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal
    },
    options
  );
};

export const getCreateNewCompetitionMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewCompetition>>,
    TError,
    { data: CreateCompetitionCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNewCompetition>>,
  TError,
  { data: CreateCompetitionCommand },
  TContext
> => {
  const mutationKey = ['createNewCompetition'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNewCompetition>>,
    { data: CreateCompetitionCommand }
  > = (props) => {
    const { data } = props ?? {};

    return createNewCompetition(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateNewCompetitionMutationResult = NonNullable<Awaited<ReturnType<typeof createNewCompetition>>>;
export type CreateNewCompetitionMutationBody = CreateCompetitionCommand;
export type CreateNewCompetitionMutationError = ProblemDetails;

export const useCreateNewCompetition = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createNewCompetition>>,
      TError,
      { data: CreateCompetitionCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createNewCompetition>>,
  TError,
  { data: CreateCompetitionCommand },
  TContext
> => {
  const mutationOptions = getCreateNewCompetitionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getOpenCompetitionsList = (
  params: GetOpenCompetitionsListParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CompetitionSummaryDtoPaginatedList>(
    { url: `/api/competitions/open`, method: 'GET', params, signal },
    options
  );
};

export const getGetOpenCompetitionsListQueryKey = (params: GetOpenCompetitionsListParams) => {
  return [`/api/competitions/open`, ...(params ? [params] : [])] as const;
};

export const getGetOpenCompetitionsListQueryOptions = <
  TData = Awaited<ReturnType<typeof getOpenCompetitionsList>>,
  TError = unknown
>(
  params: GetOpenCompetitionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOpenCompetitionsList>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOpenCompetitionsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOpenCompetitionsList>>> = ({ signal }) =>
    getOpenCompetitionsList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOpenCompetitionsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOpenCompetitionsListQueryResult = NonNullable<Awaited<ReturnType<typeof getOpenCompetitionsList>>>;
export type GetOpenCompetitionsListQueryError = unknown;

export function useGetOpenCompetitionsList<
  TData = Awaited<ReturnType<typeof getOpenCompetitionsList>>,
  TError = unknown
>(
  params: GetOpenCompetitionsListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOpenCompetitionsList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOpenCompetitionsList>>,
          TError,
          Awaited<ReturnType<typeof getOpenCompetitionsList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetOpenCompetitionsList<
  TData = Awaited<ReturnType<typeof getOpenCompetitionsList>>,
  TError = unknown
>(
  params: GetOpenCompetitionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOpenCompetitionsList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOpenCompetitionsList>>,
          TError,
          Awaited<ReturnType<typeof getOpenCompetitionsList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetOpenCompetitionsList<
  TData = Awaited<ReturnType<typeof getOpenCompetitionsList>>,
  TError = unknown
>(
  params: GetOpenCompetitionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOpenCompetitionsList>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetOpenCompetitionsList<
  TData = Awaited<ReturnType<typeof getOpenCompetitionsList>>,
  TError = unknown
>(
  params: GetOpenCompetitionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOpenCompetitionsList>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetOpenCompetitionsListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getUserCompetitionsList = (
  params: GetUserCompetitionsListParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CompetitionSummaryDtoPaginatedList>(
    { url: `/api/competitions/my`, method: 'GET', params, signal },
    options
  );
};

export const getGetUserCompetitionsListQueryKey = (params: GetUserCompetitionsListParams) => {
  return [`/api/competitions/my`, ...(params ? [params] : [])] as const;
};

export const getGetUserCompetitionsListQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserCompetitionsList>>,
  TError = ProblemDetails
>(
  params: GetUserCompetitionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCompetitionsList>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserCompetitionsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCompetitionsList>>> = ({ signal }) =>
    getUserCompetitionsList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserCompetitionsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserCompetitionsListQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCompetitionsList>>>;
export type GetUserCompetitionsListQueryError = ProblemDetails;

export function useGetUserCompetitionsList<
  TData = Awaited<ReturnType<typeof getUserCompetitionsList>>,
  TError = ProblemDetails
>(
  params: GetUserCompetitionsListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCompetitionsList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCompetitionsList>>,
          TError,
          Awaited<ReturnType<typeof getUserCompetitionsList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUserCompetitionsList<
  TData = Awaited<ReturnType<typeof getUserCompetitionsList>>,
  TError = ProblemDetails
>(
  params: GetUserCompetitionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCompetitionsList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCompetitionsList>>,
          TError,
          Awaited<ReturnType<typeof getUserCompetitionsList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUserCompetitionsList<
  TData = Awaited<ReturnType<typeof getUserCompetitionsList>>,
  TError = ProblemDetails
>(
  params: GetUserCompetitionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCompetitionsList>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetUserCompetitionsList<
  TData = Awaited<ReturnType<typeof getUserCompetitionsList>>,
  TError = ProblemDetails
>(
  params: GetUserCompetitionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCompetitionsList>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUserCompetitionsListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCompetitionDetailsById = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CompetitionDetailsDto>({ url: `/api/competitions/${id}`, method: 'GET', signal }, options);
};

export const getGetCompetitionDetailsByIdQueryKey = (id: number) => {
  return [`/api/competitions/${id}`] as const;
};

export const getGetCompetitionDetailsByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>,
  TError = void
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompetitionDetailsByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompetitionDetailsById>>> = ({ signal }) =>
    getCompetitionDetailsById(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCompetitionDetailsById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompetitionDetailsByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCompetitionDetailsById>>>;
export type GetCompetitionDetailsByIdQueryError = void;

export function useGetCompetitionDetailsById<
  TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>,
  TError = void
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompetitionDetailsById>>,
          TError,
          Awaited<ReturnType<typeof getCompetitionDetailsById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCompetitionDetailsById<
  TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>,
  TError = void
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompetitionDetailsById>>,
          TError,
          Awaited<ReturnType<typeof getCompetitionDetailsById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCompetitionDetailsById<
  TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>,
  TError = void
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetCompetitionDetailsById<
  TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>,
  TError = void
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCompetitionDetailsByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateExistingCompetition = (
  id: number,
  updateCompetitionCommand: UpdateCompetitionCommand,
  options?: SecondParameter<typeof customInstance>
) => {
  const formData = new FormData();
  if (updateCompetitionCommand.id !== undefined) {
    formData.append(`id`, updateCompetitionCommand.id.toString());
  }
  if (updateCompetitionCommand.name !== undefined && updateCompetitionCommand.name !== null) {
    formData.append(`name`, updateCompetitionCommand.name);
  }
  if (updateCompetitionCommand.startTime !== undefined) {
    formData.append(`startTime`, updateCompetitionCommand.startTime);
  }
  if (updateCompetitionCommand.endTime !== undefined) {
    formData.append(`endTime`, updateCompetitionCommand.endTime);
  }
  if (updateCompetitionCommand.fisheryId !== undefined) {
    formData.append(`fisheryId`, updateCompetitionCommand.fisheryId.toString());
  }
  if (updateCompetitionCommand.rules !== undefined && updateCompetitionCommand.rules !== null) {
    formData.append(`rules`, updateCompetitionCommand.rules);
  }
  if (updateCompetitionCommand.type !== undefined) {
    formData.append(`type`, updateCompetitionCommand.type.toString());
  }
  if (updateCompetitionCommand.image !== undefined && updateCompetitionCommand.image !== null) {
    formData.append(`image`, updateCompetitionCommand.image);
  }
  if (updateCompetitionCommand.removeCurrentImage !== undefined) {
    formData.append(`removeCurrentImage`, updateCompetitionCommand.removeCurrentImage.toString());
  }

  return customInstance<void>(
    {
      url: `/api/competitions/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData
    },
    options
  );
};

export const getUpdateExistingCompetitionMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateExistingCompetition>>,
    TError,
    { id: number; data: UpdateCompetitionCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateExistingCompetition>>,
  TError,
  { id: number; data: UpdateCompetitionCommand },
  TContext
> => {
  const mutationKey = ['updateExistingCompetition'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateExistingCompetition>>,
    { id: number; data: UpdateCompetitionCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateExistingCompetition(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateExistingCompetitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateExistingCompetition>>
>;
export type UpdateExistingCompetitionMutationBody = UpdateCompetitionCommand;
export type UpdateExistingCompetitionMutationError = ProblemDetails;

export const useUpdateExistingCompetition = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateExistingCompetition>>,
      TError,
      { id: number; data: UpdateCompetitionCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateExistingCompetition>>,
  TError,
  { id: number; data: UpdateCompetitionCommand },
  TContext
> => {
  const mutationOptions = getUpdateExistingCompetitionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const organizerStartsCompetition = (
  competitionId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/api/competitions/${competitionId}/status/start`, method: 'POST', signal },
    options
  );
};

export const getOrganizerStartsCompetitionMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizerStartsCompetition>>,
    TError,
    { competitionId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizerStartsCompetition>>,
  TError,
  { competitionId: number },
  TContext
> => {
  const mutationKey = ['organizerStartsCompetition'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizerStartsCompetition>>,
    { competitionId: number }
  > = (props) => {
    const { competitionId } = props ?? {};

    return organizerStartsCompetition(competitionId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizerStartsCompetitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizerStartsCompetition>>
>;

export type OrganizerStartsCompetitionMutationError = ProblemDetails;

export const useOrganizerStartsCompetition = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof organizerStartsCompetition>>,
      TError,
      { competitionId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof organizerStartsCompetition>>,
  TError,
  { competitionId: number },
  TContext
> => {
  const mutationOptions = getOrganizerStartsCompetitionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const organizerFinishesCompetition = (
  competitionId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/api/competitions/${competitionId}/status/finish`, method: 'POST', signal },
    options
  );
};

export const getOrganizerFinishesCompetitionMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizerFinishesCompetition>>,
    TError,
    { competitionId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizerFinishesCompetition>>,
  TError,
  { competitionId: number },
  TContext
> => {
  const mutationKey = ['organizerFinishesCompetition'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizerFinishesCompetition>>,
    { competitionId: number }
  > = (props) => {
    const { competitionId } = props ?? {};

    return organizerFinishesCompetition(competitionId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizerFinishesCompetitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizerFinishesCompetition>>
>;

export type OrganizerFinishesCompetitionMutationError = ProblemDetails;

export const useOrganizerFinishesCompetition = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof organizerFinishesCompetition>>,
      TError,
      { competitionId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof organizerFinishesCompetition>>,
  TError,
  { competitionId: number },
  TContext
> => {
  const mutationOptions = getOrganizerFinishesCompetitionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const organizerCancelsCompetition = (
  competitionId: number,
  cancelCompetitionCommand: CancelCompetitionCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/api/competitions/${competitionId}/status/cancel`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: cancelCompetitionCommand,
      signal
    },
    options
  );
};

export const getOrganizerCancelsCompetitionMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizerCancelsCompetition>>,
    TError,
    { competitionId: number; data: CancelCompetitionCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizerCancelsCompetition>>,
  TError,
  { competitionId: number; data: CancelCompetitionCommand },
  TContext
> => {
  const mutationKey = ['organizerCancelsCompetition'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizerCancelsCompetition>>,
    { competitionId: number; data: CancelCompetitionCommand }
  > = (props) => {
    const { competitionId, data } = props ?? {};

    return organizerCancelsCompetition(competitionId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizerCancelsCompetitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizerCancelsCompetition>>
>;
export type OrganizerCancelsCompetitionMutationBody = CancelCompetitionCommand;
export type OrganizerCancelsCompetitionMutationError = ProblemDetails;

export const useOrganizerCancelsCompetition = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof organizerCancelsCompetition>>,
      TError,
      { competitionId: number; data: CancelCompetitionCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof organizerCancelsCompetition>>,
  TError,
  { competitionId: number; data: CancelCompetitionCommand },
  TContext
> => {
  const mutationOptions = getOrganizerCancelsCompetitionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const userJoinsCompetition = (
  competitionId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown>(
    { url: `/api/competitions/${competitionId}/participants/join`, method: 'POST', signal },
    options
  );
};

export const getUserJoinsCompetitionMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userJoinsCompetition>>,
    TError,
    { competitionId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userJoinsCompetition>>,
  TError,
  { competitionId: number },
  TContext
> => {
  const mutationKey = ['userJoinsCompetition'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userJoinsCompetition>>, { competitionId: number }> = (
    props
  ) => {
    const { competitionId } = props ?? {};

    return userJoinsCompetition(competitionId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserJoinsCompetitionMutationResult = NonNullable<Awaited<ReturnType<typeof userJoinsCompetition>>>;

export type UserJoinsCompetitionMutationError = ProblemDetails;

export const useUserJoinsCompetition = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userJoinsCompetition>>,
      TError,
      { competitionId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof userJoinsCompetition>>, TError, { competitionId: number }, TContext> => {
  const mutationOptions = getUserJoinsCompetitionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const organizerAddsParticipant = (
  competitionId: number,
  addParticipantCommand: AddParticipantCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown>(
    {
      url: `/api/competitions/${competitionId}/participants`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addParticipantCommand,
      signal
    },
    options
  );
};

export const getOrganizerAddsParticipantMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizerAddsParticipant>>,
    TError,
    { competitionId: number; data: AddParticipantCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizerAddsParticipant>>,
  TError,
  { competitionId: number; data: AddParticipantCommand },
  TContext
> => {
  const mutationKey = ['organizerAddsParticipant'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizerAddsParticipant>>,
    { competitionId: number; data: AddParticipantCommand }
  > = (props) => {
    const { competitionId, data } = props ?? {};

    return organizerAddsParticipant(competitionId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizerAddsParticipantMutationResult = NonNullable<Awaited<ReturnType<typeof organizerAddsParticipant>>>;
export type OrganizerAddsParticipantMutationBody = AddParticipantCommand;
export type OrganizerAddsParticipantMutationError = ProblemDetails;

export const useOrganizerAddsParticipant = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof organizerAddsParticipant>>,
      TError,
      { competitionId: number; data: AddParticipantCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof organizerAddsParticipant>>,
  TError,
  { competitionId: number; data: AddParticipantCommand },
  TContext
> => {
  const mutationOptions = getOrganizerAddsParticipantMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const organizerRemovesParticipant = (
  competitionId: number,
  participantEntryId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/competitions/${competitionId}/participants/${participantEntryId}`, method: 'DELETE' },
    options
  );
};

export const getOrganizerRemovesParticipantMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizerRemovesParticipant>>,
    TError,
    { competitionId: number; participantEntryId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizerRemovesParticipant>>,
  TError,
  { competitionId: number; participantEntryId: number },
  TContext
> => {
  const mutationKey = ['organizerRemovesParticipant'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizerRemovesParticipant>>,
    { competitionId: number; participantEntryId: number }
  > = (props) => {
    const { competitionId, participantEntryId } = props ?? {};

    return organizerRemovesParticipant(competitionId, participantEntryId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizerRemovesParticipantMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizerRemovesParticipant>>
>;

export type OrganizerRemovesParticipantMutationError = ProblemDetails;

export const useOrganizerRemovesParticipant = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof organizerRemovesParticipant>>,
      TError,
      { competitionId: number; participantEntryId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof organizerRemovesParticipant>>,
  TError,
  { competitionId: number; participantEntryId: number },
  TContext
> => {
  const mutationOptions = getOrganizerRemovesParticipantMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const organizerAssignsJudge = (
  competitionId: number,
  assignJudgeCommand: AssignJudgeCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown>(
    {
      url: `/api/competitions/${competitionId}/judges`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: assignJudgeCommand,
      signal
    },
    options
  );
};

export const getOrganizerAssignsJudgeMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizerAssignsJudge>>,
    TError,
    { competitionId: number; data: AssignJudgeCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizerAssignsJudge>>,
  TError,
  { competitionId: number; data: AssignJudgeCommand },
  TContext
> => {
  const mutationKey = ['organizerAssignsJudge'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizerAssignsJudge>>,
    { competitionId: number; data: AssignJudgeCommand }
  > = (props) => {
    const { competitionId, data } = props ?? {};

    return organizerAssignsJudge(competitionId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizerAssignsJudgeMutationResult = NonNullable<Awaited<ReturnType<typeof organizerAssignsJudge>>>;
export type OrganizerAssignsJudgeMutationBody = AssignJudgeCommand;
export type OrganizerAssignsJudgeMutationError = ProblemDetails;

export const useOrganizerAssignsJudge = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof organizerAssignsJudge>>,
      TError,
      { competitionId: number; data: AssignJudgeCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof organizerAssignsJudge>>,
  TError,
  { competitionId: number; data: AssignJudgeCommand },
  TContext
> => {
  const mutationOptions = getOrganizerAssignsJudgeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const organizerRemovesJudge = (
  competitionId: number,
  judgeParticipantEntryId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/competitions/${competitionId}/judges/${judgeParticipantEntryId}`, method: 'DELETE' },
    options
  );
};

export const getOrganizerRemovesJudgeMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizerRemovesJudge>>,
    TError,
    { competitionId: number; judgeParticipantEntryId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizerRemovesJudge>>,
  TError,
  { competitionId: number; judgeParticipantEntryId: number },
  TContext
> => {
  const mutationKey = ['organizerRemovesJudge'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizerRemovesJudge>>,
    { competitionId: number; judgeParticipantEntryId: number }
  > = (props) => {
    const { competitionId, judgeParticipantEntryId } = props ?? {};

    return organizerRemovesJudge(competitionId, judgeParticipantEntryId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizerRemovesJudgeMutationResult = NonNullable<Awaited<ReturnType<typeof organizerRemovesJudge>>>;

export type OrganizerRemovesJudgeMutationError = ProblemDetails;

export const useOrganizerRemovesJudge = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof organizerRemovesJudge>>,
      TError,
      { competitionId: number; judgeParticipantEntryId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof organizerRemovesJudge>>,
  TError,
  { competitionId: number; judgeParticipantEntryId: number },
  TContext
> => {
  const mutationOptions = getOrganizerRemovesJudgeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const judgeRecordsFishCatch = (
  competitionId: number,
  recordCompetitionFishCatchCommand: RecordCompetitionFishCatchCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (recordCompetitionFishCatchCommand.competitionId !== undefined) {
    formData.append(`competitionId`, recordCompetitionFishCatchCommand.competitionId.toString());
  }
  if (recordCompetitionFishCatchCommand.participantEntryId !== undefined) {
    formData.append(`participantEntryId`, recordCompetitionFishCatchCommand.participantEntryId.toString());
  }
  if (recordCompetitionFishCatchCommand.fishSpeciesId !== undefined) {
    formData.append(`fishSpeciesId`, recordCompetitionFishCatchCommand.fishSpeciesId.toString());
  }
  if (recordCompetitionFishCatchCommand.image !== undefined && recordCompetitionFishCatchCommand.image !== null) {
    formData.append(`image`, recordCompetitionFishCatchCommand.image);
  }
  if (recordCompetitionFishCatchCommand.catchTime !== undefined) {
    formData.append(`catchTime`, recordCompetitionFishCatchCommand.catchTime);
  }
  if (
    recordCompetitionFishCatchCommand.lengthInCm !== undefined &&
    recordCompetitionFishCatchCommand.lengthInCm !== null
  ) {
    formData.append(`lengthInCm`, recordCompetitionFishCatchCommand.lengthInCm.toString());
  }
  if (
    recordCompetitionFishCatchCommand.weightInKg !== undefined &&
    recordCompetitionFishCatchCommand.weightInKg !== null
  ) {
    formData.append(`weightInKg`, recordCompetitionFishCatchCommand.weightInKg.toString());
  }

  return customInstance<unknown>(
    {
      url: `/api/competitions/${competitionId}/catches`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal
    },
    options
  );
};

export const getJudgeRecordsFishCatchMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof judgeRecordsFishCatch>>,
    TError,
    { competitionId: number; data: RecordCompetitionFishCatchCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof judgeRecordsFishCatch>>,
  TError,
  { competitionId: number; data: RecordCompetitionFishCatchCommand },
  TContext
> => {
  const mutationKey = ['judgeRecordsFishCatch'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof judgeRecordsFishCatch>>,
    { competitionId: number; data: RecordCompetitionFishCatchCommand }
  > = (props) => {
    const { competitionId, data } = props ?? {};

    return judgeRecordsFishCatch(competitionId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type JudgeRecordsFishCatchMutationResult = NonNullable<Awaited<ReturnType<typeof judgeRecordsFishCatch>>>;
export type JudgeRecordsFishCatchMutationBody = RecordCompetitionFishCatchCommand;
export type JudgeRecordsFishCatchMutationError = ProblemDetails;

export const useJudgeRecordsFishCatch = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof judgeRecordsFishCatch>>,
      TError,
      { competitionId: number; data: RecordCompetitionFishCatchCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof judgeRecordsFishCatch>>,
  TError,
  { competitionId: number; data: RecordCompetitionFishCatchCommand },
  TContext
> => {
  const mutationOptions = getJudgeRecordsFishCatchMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const organizerUpdatesCompetitionCategory = (
  competitionId: number,
  competitionCategoryId: number,
  updateCompetitionCategoryCommand: UpdateCompetitionCategoryCommand,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/api/competitions/${competitionId}/categories/${competitionCategoryId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateCompetitionCategoryCommand
    },
    options
  );
};

export const getOrganizerUpdatesCompetitionCategoryMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizerUpdatesCompetitionCategory>>,
    TError,
    { competitionId: number; competitionCategoryId: number; data: UpdateCompetitionCategoryCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizerUpdatesCompetitionCategory>>,
  TError,
  { competitionId: number; competitionCategoryId: number; data: UpdateCompetitionCategoryCommand },
  TContext
> => {
  const mutationKey = ['organizerUpdatesCompetitionCategory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizerUpdatesCompetitionCategory>>,
    { competitionId: number; competitionCategoryId: number; data: UpdateCompetitionCategoryCommand }
  > = (props) => {
    const { competitionId, competitionCategoryId, data } = props ?? {};

    return organizerUpdatesCompetitionCategory(competitionId, competitionCategoryId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizerUpdatesCompetitionCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizerUpdatesCompetitionCategory>>
>;
export type OrganizerUpdatesCompetitionCategoryMutationBody = UpdateCompetitionCategoryCommand;
export type OrganizerUpdatesCompetitionCategoryMutationError = ProblemDetails;

export const useOrganizerUpdatesCompetitionCategory = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof organizerUpdatesCompetitionCategory>>,
      TError,
      { competitionId: number; competitionCategoryId: number; data: UpdateCompetitionCategoryCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof organizerUpdatesCompetitionCategory>>,
  TError,
  { competitionId: number; competitionCategoryId: number; data: UpdateCompetitionCategoryCommand },
  TContext
> => {
  const mutationOptions = getOrganizerUpdatesCompetitionCategoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
