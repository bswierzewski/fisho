/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Fishio API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddParticipantCommand,
  CreateCompetitionCommand,
  HttpValidationProblemDetails,
  ListAvailableCompetitionsParams,
  RecordFishCatchCommand,
  Void
} from '../../models';

import { customInstance } from '../../axios';
import type { ErrorType } from '../../axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const createCompetition = (
    createCompetitionCommand: CreateCompetitionCommand,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/competitions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCompetitionCommand, signal
    },
      options);
    }
  


export const getCreateCompetitionMutationOptions = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCompetition>>, TError,{data: CreateCompetitionCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createCompetition>>, TError,{data: CreateCompetitionCommand}, TContext> => {

const mutationKey = ['createCompetition'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCompetition>>, {data: CreateCompetitionCommand}> = (props) => {
          const {data} = props ?? {};

          return  createCompetition(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCompetitionMutationResult = NonNullable<Awaited<ReturnType<typeof createCompetition>>>
    export type CreateCompetitionMutationBody = CreateCompetitionCommand
    export type CreateCompetitionMutationError = ErrorType<HttpValidationProblemDetails>

    export const useCreateCompetition = <TError = ErrorType<HttpValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCompetition>>, TError,{data: CreateCompetitionCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCompetition>>,
        TError,
        {data: CreateCompetitionCommand},
        TContext
      > => {

      const mutationOptions = getCreateCompetitionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const listAvailableCompetitions = (
    params: ListAvailableCompetitionsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListAvailableCompetitionsQueryKey = (params: ListAvailableCompetitionsParams,) => {
    return [`/api/competitions`, ...(params ? [params]: [])] as const;
    }

    
export const getListAvailableCompetitionsQueryOptions = <TData = Awaited<ReturnType<typeof listAvailableCompetitions>>, TError = ErrorType<unknown>>(params: ListAvailableCompetitionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableCompetitions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListAvailableCompetitionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listAvailableCompetitions>>> = ({ signal }) => listAvailableCompetitions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listAvailableCompetitions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAvailableCompetitionsQueryResult = NonNullable<Awaited<ReturnType<typeof listAvailableCompetitions>>>
export type ListAvailableCompetitionsQueryError = ErrorType<unknown>


export function useListAvailableCompetitions<TData = Awaited<ReturnType<typeof listAvailableCompetitions>>, TError = ErrorType<unknown>>(
 params: ListAvailableCompetitionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableCompetitions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAvailableCompetitions>>,
          TError,
          Awaited<ReturnType<typeof listAvailableCompetitions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAvailableCompetitions<TData = Awaited<ReturnType<typeof listAvailableCompetitions>>, TError = ErrorType<unknown>>(
 params: ListAvailableCompetitionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableCompetitions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAvailableCompetitions>>,
          TError,
          Awaited<ReturnType<typeof listAvailableCompetitions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAvailableCompetitions<TData = Awaited<ReturnType<typeof listAvailableCompetitions>>, TError = ErrorType<unknown>>(
 params: ListAvailableCompetitionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableCompetitions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListAvailableCompetitions<TData = Awaited<ReturnType<typeof listAvailableCompetitions>>, TError = ErrorType<unknown>>(
 params: ListAvailableCompetitionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAvailableCompetitions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListAvailableCompetitionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCompetitionDetailsById = (
    competitionId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/${competitionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCompetitionDetailsByIdQueryKey = (competitionId: number,) => {
    return [`/api/competitions/${competitionId}`] as const;
    }

    
export const getGetCompetitionDetailsByIdQueryOptions = <TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError = ErrorType<unknown>>(competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompetitionDetailsByIdQueryKey(competitionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompetitionDetailsById>>> = ({ signal }) => getCompetitionDetailsById(competitionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(competitionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompetitionDetailsByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCompetitionDetailsById>>>
export type GetCompetitionDetailsByIdQueryError = ErrorType<unknown>


export function useGetCompetitionDetailsById<TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError = ErrorType<unknown>>(
 competitionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompetitionDetailsById>>,
          TError,
          Awaited<ReturnType<typeof getCompetitionDetailsById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompetitionDetailsById<TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompetitionDetailsById>>,
          TError,
          Awaited<ReturnType<typeof getCompetitionDetailsById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompetitionDetailsById<TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCompetitionDetailsById<TData = Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionDetailsById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompetitionDetailsByIdQueryOptions(competitionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const listMyCompetitions = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/mine`, method: 'GET', signal
    },
      options);
    }
  

export const getListMyCompetitionsQueryKey = () => {
    return [`/api/competitions/mine`] as const;
    }

    
export const getListMyCompetitionsQueryOptions = <TData = Awaited<ReturnType<typeof listMyCompetitions>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMyCompetitions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListMyCompetitionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listMyCompetitions>>> = ({ signal }) => listMyCompetitions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listMyCompetitions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListMyCompetitionsQueryResult = NonNullable<Awaited<ReturnType<typeof listMyCompetitions>>>
export type ListMyCompetitionsQueryError = ErrorType<unknown>


export function useListMyCompetitions<TData = Awaited<ReturnType<typeof listMyCompetitions>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMyCompetitions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMyCompetitions>>,
          TError,
          Awaited<ReturnType<typeof listMyCompetitions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListMyCompetitions<TData = Awaited<ReturnType<typeof listMyCompetitions>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMyCompetitions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMyCompetitions>>,
          TError,
          Awaited<ReturnType<typeof listMyCompetitions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListMyCompetitions<TData = Awaited<ReturnType<typeof listMyCompetitions>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMyCompetitions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListMyCompetitions<TData = Awaited<ReturnType<typeof listMyCompetitions>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMyCompetitions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListMyCompetitionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const joinCompetitionAsParticipant = (
    competitionId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/${competitionId}/participants/join`, method: 'POST', signal
    },
      options);
    }
  


export const getJoinCompetitionAsParticipantMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof joinCompetitionAsParticipant>>, TError,{competitionId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof joinCompetitionAsParticipant>>, TError,{competitionId: number}, TContext> => {

const mutationKey = ['joinCompetitionAsParticipant'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof joinCompetitionAsParticipant>>, {competitionId: number}> = (props) => {
          const {competitionId} = props ?? {};

          return  joinCompetitionAsParticipant(competitionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type JoinCompetitionAsParticipantMutationResult = NonNullable<Awaited<ReturnType<typeof joinCompetitionAsParticipant>>>
    
    export type JoinCompetitionAsParticipantMutationError = ErrorType<unknown>

    export const useJoinCompetitionAsParticipant = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof joinCompetitionAsParticipant>>, TError,{competitionId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof joinCompetitionAsParticipant>>,
        TError,
        {competitionId: number},
        TContext
      > => {

      const mutationOptions = getJoinCompetitionAsParticipantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const listCompetitionParticipantsForCompetition = (
    competitionId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/${competitionId}/participants`, method: 'GET', signal
    },
      options);
    }
  

export const getListCompetitionParticipantsForCompetitionQueryKey = (competitionId: number,) => {
    return [`/api/competitions/${competitionId}/participants`] as const;
    }

    
export const getListCompetitionParticipantsForCompetitionQueryOptions = <TData = Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError = ErrorType<unknown>>(competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListCompetitionParticipantsForCompetitionQueryKey(competitionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>> = ({ signal }) => listCompetitionParticipantsForCompetition(competitionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(competitionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListCompetitionParticipantsForCompetitionQueryResult = NonNullable<Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>>
export type ListCompetitionParticipantsForCompetitionQueryError = ErrorType<unknown>


export function useListCompetitionParticipantsForCompetition<TData = Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError = ErrorType<unknown>>(
 competitionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>,
          TError,
          Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListCompetitionParticipantsForCompetition<TData = Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>,
          TError,
          Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListCompetitionParticipantsForCompetition<TData = Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListCompetitionParticipantsForCompetition<TData = Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompetitionParticipantsForCompetition>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListCompetitionParticipantsForCompetitionQueryOptions(competitionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const addParticipantByCompetitionOrganizer = (
    competitionId: number,
    addParticipantCommand: AddParticipantCommand,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/${competitionId}/participants/add-by-organizer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addParticipantCommand, signal
    },
      options);
    }
  


export const getAddParticipantByCompetitionOrganizerMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addParticipantByCompetitionOrganizer>>, TError,{competitionId: number;data: AddParticipantCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof addParticipantByCompetitionOrganizer>>, TError,{competitionId: number;data: AddParticipantCommand}, TContext> => {

const mutationKey = ['addParticipantByCompetitionOrganizer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addParticipantByCompetitionOrganizer>>, {competitionId: number;data: AddParticipantCommand}> = (props) => {
          const {competitionId,data} = props ?? {};

          return  addParticipantByCompetitionOrganizer(competitionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddParticipantByCompetitionOrganizerMutationResult = NonNullable<Awaited<ReturnType<typeof addParticipantByCompetitionOrganizer>>>
    export type AddParticipantByCompetitionOrganizerMutationBody = AddParticipantCommand
    export type AddParticipantByCompetitionOrganizerMutationError = ErrorType<unknown>

    export const useAddParticipantByCompetitionOrganizer = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addParticipantByCompetitionOrganizer>>, TError,{competitionId: number;data: AddParticipantCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addParticipantByCompetitionOrganizer>>,
        TError,
        {competitionId: number;data: AddParticipantCommand},
        TContext
      > => {

      const mutationOptions = getAddParticipantByCompetitionOrganizerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const removeParticipantByCompetitionOrganizer = (
    competitionId: number,
    participantId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/${competitionId}/participants/${participantId}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveParticipantByCompetitionOrganizerMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeParticipantByCompetitionOrganizer>>, TError,{competitionId: number;participantId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeParticipantByCompetitionOrganizer>>, TError,{competitionId: number;participantId: number}, TContext> => {

const mutationKey = ['removeParticipantByCompetitionOrganizer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeParticipantByCompetitionOrganizer>>, {competitionId: number;participantId: number}> = (props) => {
          const {competitionId,participantId} = props ?? {};

          return  removeParticipantByCompetitionOrganizer(competitionId,participantId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveParticipantByCompetitionOrganizerMutationResult = NonNullable<Awaited<ReturnType<typeof removeParticipantByCompetitionOrganizer>>>
    
    export type RemoveParticipantByCompetitionOrganizerMutationError = ErrorType<unknown>

    export const useRemoveParticipantByCompetitionOrganizer = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeParticipantByCompetitionOrganizer>>, TError,{competitionId: number;participantId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeParticipantByCompetitionOrganizer>>,
        TError,
        {competitionId: number;participantId: number},
        TContext
      > => {

      const mutationOptions = getRemoveParticipantByCompetitionOrganizerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const assignJudgeRoleToParticipant = (
    competitionId: number,
    participantId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/${competitionId}/participants/${participantId}/assign-judge`, method: 'PUT'
    },
      options);
    }
  


export const getAssignJudgeRoleToParticipantMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof assignJudgeRoleToParticipant>>, TError,{competitionId: number;participantId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof assignJudgeRoleToParticipant>>, TError,{competitionId: number;participantId: number}, TContext> => {

const mutationKey = ['assignJudgeRoleToParticipant'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof assignJudgeRoleToParticipant>>, {competitionId: number;participantId: number}> = (props) => {
          const {competitionId,participantId} = props ?? {};

          return  assignJudgeRoleToParticipant(competitionId,participantId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AssignJudgeRoleToParticipantMutationResult = NonNullable<Awaited<ReturnType<typeof assignJudgeRoleToParticipant>>>
    
    export type AssignJudgeRoleToParticipantMutationError = ErrorType<unknown>

    export const useAssignJudgeRoleToParticipant = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof assignJudgeRoleToParticipant>>, TError,{competitionId: number;participantId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof assignJudgeRoleToParticipant>>,
        TError,
        {competitionId: number;participantId: number},
        TContext
      > => {

      const mutationOptions = getAssignJudgeRoleToParticipantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const recordFishCatchForParticipant = (
    competitionId: number,
    recordFishCatchCommand: RecordFishCatchCommand,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/${competitionId}/catches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: recordFishCatchCommand, signal
    },
      options);
    }
  


export const getRecordFishCatchForParticipantMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recordFishCatchForParticipant>>, TError,{competitionId: number;data: RecordFishCatchCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof recordFishCatchForParticipant>>, TError,{competitionId: number;data: RecordFishCatchCommand}, TContext> => {

const mutationKey = ['recordFishCatchForParticipant'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof recordFishCatchForParticipant>>, {competitionId: number;data: RecordFishCatchCommand}> = (props) => {
          const {competitionId,data} = props ?? {};

          return  recordFishCatchForParticipant(competitionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RecordFishCatchForParticipantMutationResult = NonNullable<Awaited<ReturnType<typeof recordFishCatchForParticipant>>>
    export type RecordFishCatchForParticipantMutationBody = RecordFishCatchCommand
    export type RecordFishCatchForParticipantMutationError = ErrorType<unknown>

    export const useRecordFishCatchForParticipant = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recordFishCatchForParticipant>>, TError,{competitionId: number;data: RecordFishCatchCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof recordFishCatchForParticipant>>,
        TError,
        {competitionId: number;data: RecordFishCatchCommand},
        TContext
      > => {

      const mutationOptions = getRecordFishCatchForParticipantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const listFishCatchesForCompetition = (
    competitionId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Void>(
      {url: `/api/competitions/${competitionId}/catches`, method: 'GET', signal
    },
      options);
    }
  

export const getListFishCatchesForCompetitionQueryKey = (competitionId: number,) => {
    return [`/api/competitions/${competitionId}/catches`] as const;
    }

    
export const getListFishCatchesForCompetitionQueryOptions = <TData = Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError = ErrorType<unknown>>(competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListFishCatchesForCompetitionQueryKey(competitionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listFishCatchesForCompetition>>> = ({ signal }) => listFishCatchesForCompetition(competitionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(competitionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListFishCatchesForCompetitionQueryResult = NonNullable<Awaited<ReturnType<typeof listFishCatchesForCompetition>>>
export type ListFishCatchesForCompetitionQueryError = ErrorType<unknown>


export function useListFishCatchesForCompetition<TData = Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError = ErrorType<unknown>>(
 competitionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listFishCatchesForCompetition>>,
          TError,
          Awaited<ReturnType<typeof listFishCatchesForCompetition>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListFishCatchesForCompetition<TData = Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listFishCatchesForCompetition>>,
          TError,
          Awaited<ReturnType<typeof listFishCatchesForCompetition>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListFishCatchesForCompetition<TData = Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListFishCatchesForCompetition<TData = Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError = ErrorType<unknown>>(
 competitionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listFishCatchesForCompetition>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListFishCatchesForCompetitionQueryOptions(competitionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



