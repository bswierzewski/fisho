/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Fishio API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DashboardDto,
  GetUserDashboardDataParams,
  ProblemDetails
} from '../../models';

import { customInstance } from '../../axios';
import type { ErrorType } from '../../axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getUserDashboardData = (
    params: GetUserDashboardDataParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<DashboardDto>(
      {url: `/api/dashboard`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetUserDashboardDataQueryKey = (params: GetUserDashboardDataParams,) => {
    return [`/api/dashboard`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserDashboardDataQueryOptions = <TData = Awaited<ReturnType<typeof getUserDashboardData>>, TError = ErrorType<ProblemDetails>>(params: GetUserDashboardDataParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDashboardData>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDashboardDataQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDashboardData>>> = ({ signal }) => getUserDashboardData(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserDashboardData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserDashboardDataQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDashboardData>>>
export type GetUserDashboardDataQueryError = ErrorType<ProblemDetails>


export function useGetUserDashboardData<TData = Awaited<ReturnType<typeof getUserDashboardData>>, TError = ErrorType<ProblemDetails>>(
 params: GetUserDashboardDataParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDashboardData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDashboardData>>,
          TError,
          Awaited<ReturnType<typeof getUserDashboardData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDashboardData<TData = Awaited<ReturnType<typeof getUserDashboardData>>, TError = ErrorType<ProblemDetails>>(
 params: GetUserDashboardDataParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDashboardData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDashboardData>>,
          TError,
          Awaited<ReturnType<typeof getUserDashboardData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDashboardData<TData = Awaited<ReturnType<typeof getUserDashboardData>>, TError = ErrorType<ProblemDetails>>(
 params: GetUserDashboardDataParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDashboardData>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserDashboardData<TData = Awaited<ReturnType<typeof getUserDashboardData>>, TError = ErrorType<ProblemDetails>>(
 params: GetUserDashboardDataParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDashboardData>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserDashboardDataQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



