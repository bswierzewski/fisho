/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Fishio API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '../axios';
import type {
  CreateFisheryCommand,
  FisheryDto,
  FisheryDtoPaginatedList,
  GetAllFisheriesParams,
  HttpValidationProblemDetails,
  ProblemDetails,
  UpdateFisheryCommand
} from '../models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAllFisheries = (
  params: GetAllFisheriesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FisheryDtoPaginatedList>({ url: `/api/fisheries`, method: 'GET', params, signal }, options);
};

export const getGetAllFisheriesQueryKey = (params: GetAllFisheriesParams) => {
  return [`/api/fisheries`, ...(params ? [params] : [])] as const;
};

export const getGetAllFisheriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllFisheries>>, TError = unknown>(
  params: GetAllFisheriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFisheries>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllFisheriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllFisheries>>> = ({ signal }) =>
    getAllFisheries(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllFisheries>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllFisheriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllFisheries>>>;
export type GetAllFisheriesQueryError = unknown;

export function useGetAllFisheries<TData = Awaited<ReturnType<typeof getAllFisheries>>, TError = unknown>(
  params: GetAllFisheriesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFisheries>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllFisheries>>,
          TError,
          Awaited<ReturnType<typeof getAllFisheries>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllFisheries<TData = Awaited<ReturnType<typeof getAllFisheries>>, TError = unknown>(
  params: GetAllFisheriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFisheries>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllFisheries>>,
          TError,
          Awaited<ReturnType<typeof getAllFisheries>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllFisheries<TData = Awaited<ReturnType<typeof getAllFisheries>>, TError = unknown>(
  params: GetAllFisheriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFisheries>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllFisheries<TData = Awaited<ReturnType<typeof getAllFisheries>>, TError = unknown>(
  params: GetAllFisheriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFisheries>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllFisheriesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createFishery = (
  createFisheryCommand: CreateFisheryCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (createFisheryCommand.name !== undefined && createFisheryCommand.name !== null) {
    formData.append(`name`, createFisheryCommand.name);
  }
  if (createFisheryCommand.description !== undefined && createFisheryCommand.description !== null) {
    formData.append(`description`, createFisheryCommand.description);
  }
  if (createFisheryCommand.location !== undefined && createFisheryCommand.location !== null) {
    formData.append(`location`, createFisheryCommand.location);
  }
  if (createFisheryCommand.image !== undefined && createFisheryCommand.image !== null) {
    formData.append(`image`, createFisheryCommand.image);
  }
  if (createFisheryCommand.fishSpeciesIds !== undefined && createFisheryCommand.fishSpeciesIds !== null) {
    createFisheryCommand.fishSpeciesIds.forEach((value) => formData.append(`fishSpeciesIds`, value.toString()));
  }

  return customInstance<unknown>(
    {
      url: `/api/fisheries`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal
    },
    options
  );
};

export const getCreateFisheryMutationOptions = <
  TError = HttpValidationProblemDetails | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFishery>>,
    TError,
    { data: CreateFisheryCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof createFishery>>, TError, { data: CreateFisheryCommand }, TContext> => {
  const mutationKey = ['createFishery'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createFishery>>, { data: CreateFisheryCommand }> = (
    props
  ) => {
    const { data } = props ?? {};

    return createFishery(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateFisheryMutationResult = NonNullable<Awaited<ReturnType<typeof createFishery>>>;
export type CreateFisheryMutationBody = CreateFisheryCommand;
export type CreateFisheryMutationError = HttpValidationProblemDetails | ProblemDetails;

export const useCreateFishery = <TError = HttpValidationProblemDetails | ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createFishery>>,
      TError,
      { data: CreateFisheryCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof createFishery>>, TError, { data: CreateFisheryCommand }, TContext> => {
  const mutationOptions = getCreateFisheryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getFisheryById = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<FisheryDto>({ url: `/api/fisheries/${id}`, method: 'GET', signal }, options);
};

export const getGetFisheryByIdQueryKey = (id: number) => {
  return [`/api/fisheries/${id}`] as const;
};

export const getGetFisheryByIdQueryOptions = <TData = Awaited<ReturnType<typeof getFisheryById>>, TError = void>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFisheryById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFisheryByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFisheryById>>> = ({ signal }) =>
    getFisheryById(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFisheryById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFisheryByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getFisheryById>>>;
export type GetFisheryByIdQueryError = void;

export function useGetFisheryById<TData = Awaited<ReturnType<typeof getFisheryById>>, TError = void>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFisheryById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFisheryById>>,
          TError,
          Awaited<ReturnType<typeof getFisheryById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetFisheryById<TData = Awaited<ReturnType<typeof getFisheryById>>, TError = void>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFisheryById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFisheryById>>,
          TError,
          Awaited<ReturnType<typeof getFisheryById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetFisheryById<TData = Awaited<ReturnType<typeof getFisheryById>>, TError = void>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFisheryById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetFisheryById<TData = Awaited<ReturnType<typeof getFisheryById>>, TError = void>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFisheryById>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetFisheryByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateExistingFishery = (
  id: number,
  updateFisheryCommand: UpdateFisheryCommand,
  options?: SecondParameter<typeof customInstance>
) => {
  const formData = new FormData();
  if (updateFisheryCommand.id !== undefined) {
    formData.append(`id`, updateFisheryCommand.id.toString());
  }
  if (updateFisheryCommand.name !== undefined && updateFisheryCommand.name !== null) {
    formData.append(`name`, updateFisheryCommand.name);
  }
  if (updateFisheryCommand.location !== undefined && updateFisheryCommand.location !== null) {
    formData.append(`location`, updateFisheryCommand.location);
  }
  if (updateFisheryCommand.image !== undefined && updateFisheryCommand.image !== null) {
    formData.append(`image`, updateFisheryCommand.image);
  }
  if (updateFisheryCommand.removeCurrentImage !== undefined) {
    formData.append(`removeCurrentImage`, updateFisheryCommand.removeCurrentImage.toString());
  }
  if (updateFisheryCommand.fishSpeciesIds !== undefined && updateFisheryCommand.fishSpeciesIds !== null) {
    updateFisheryCommand.fishSpeciesIds.forEach((value) => formData.append(`fishSpeciesIds`, value.toString()));
  }

  return customInstance<void>(
    { url: `/api/fisheries/${id}`, method: 'PUT', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
    options
  );
};

export const getUpdateExistingFisheryMutationOptions = <
  TError = HttpValidationProblemDetails | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateExistingFishery>>,
    TError,
    { id: number; data: UpdateFisheryCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateExistingFishery>>,
  TError,
  { id: number; data: UpdateFisheryCommand },
  TContext
> => {
  const mutationKey = ['updateExistingFishery'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateExistingFishery>>,
    { id: number; data: UpdateFisheryCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateExistingFishery(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateExistingFisheryMutationResult = NonNullable<Awaited<ReturnType<typeof updateExistingFishery>>>;
export type UpdateExistingFisheryMutationBody = UpdateFisheryCommand;
export type UpdateExistingFisheryMutationError = HttpValidationProblemDetails | ProblemDetails;

export const useUpdateExistingFishery = <TError = HttpValidationProblemDetails | ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateExistingFishery>>,
      TError,
      { id: number; data: UpdateFisheryCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateExistingFishery>>,
  TError,
  { id: number; data: UpdateFisheryCommand },
  TContext
> => {
  const mutationOptions = getUpdateExistingFisheryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteExistingFishery = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/api/fisheries/${id}`, method: 'DELETE' }, options);
};

export const getDeleteExistingFisheryMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteExistingFishery>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteExistingFishery>>, TError, { id: number }, TContext> => {
  const mutationKey = ['deleteExistingFishery'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteExistingFishery>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteExistingFishery(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteExistingFisheryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteExistingFishery>>>;

export type DeleteExistingFisheryMutationError = ProblemDetails;

export const useDeleteExistingFishery = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteExistingFishery>>, TError, { id: number }, TContext>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof deleteExistingFishery>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteExistingFisheryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
