/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Fishio API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateLogbookEntryCommand,
  GetCurrentUserLogbookEntriesParams,
  HttpValidationProblemDetails,
  LogbookEntryDto,
  ProblemDetails,
  UpdateLogbookEntryCommand,
  UserLogbookEntryDtoPaginatedList
} from '../../models';

import { customInstance } from '../../axios';
import type { ErrorType } from '../../axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const createNewLogbookEntry = (
    createLogbookEntryCommand: CreateLogbookEntryCommand,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(createLogbookEntryCommand.image !== undefined && createLogbookEntryCommand.image !== null) {
 formData.append(`image`, createLogbookEntryCommand.image)
 }
if(createLogbookEntryCommand.catchTime !== undefined && createLogbookEntryCommand.catchTime !== null) {
 formData.append(`catchTime`, createLogbookEntryCommand.catchTime)
 }
if(createLogbookEntryCommand.lengthInCm !== undefined && createLogbookEntryCommand.lengthInCm !== null) {
 formData.append(`lengthInCm`, createLogbookEntryCommand.lengthInCm.toString())
 }
if(createLogbookEntryCommand.weightInKg !== undefined && createLogbookEntryCommand.weightInKg !== null) {
 formData.append(`weightInKg`, createLogbookEntryCommand.weightInKg.toString())
 }
if(createLogbookEntryCommand.notes !== undefined && createLogbookEntryCommand.notes !== null) {
 formData.append(`notes`, createLogbookEntryCommand.notes)
 }
if(createLogbookEntryCommand.fishSpeciesId !== undefined && createLogbookEntryCommand.fishSpeciesId !== null) {
 formData.append(`fishSpeciesId`, createLogbookEntryCommand.fishSpeciesId.toString())
 }
if(createLogbookEntryCommand.fisheryId !== undefined && createLogbookEntryCommand.fisheryId !== null) {
 formData.append(`fisheryId`, createLogbookEntryCommand.fisheryId.toString())
 }

      return customInstance<unknown>(
      {url: `/api/logbook`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getCreateNewLogbookEntryMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewLogbookEntry>>, TError,{data: CreateLogbookEntryCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewLogbookEntry>>, TError,{data: CreateLogbookEntryCommand}, TContext> => {

const mutationKey = ['createNewLogbookEntry'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewLogbookEntry>>, {data: CreateLogbookEntryCommand}> = (props) => {
          const {data} = props ?? {};

          return  createNewLogbookEntry(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewLogbookEntryMutationResult = NonNullable<Awaited<ReturnType<typeof createNewLogbookEntry>>>
    export type CreateNewLogbookEntryMutationBody = CreateLogbookEntryCommand
    export type CreateNewLogbookEntryMutationError = ErrorType<HttpValidationProblemDetails | ProblemDetails>

    export const useCreateNewLogbookEntry = <TError = ErrorType<HttpValidationProblemDetails | ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewLogbookEntry>>, TError,{data: CreateLogbookEntryCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewLogbookEntry>>,
        TError,
        {data: CreateLogbookEntryCommand},
        TContext
      > => {

      const mutationOptions = getCreateNewLogbookEntryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getCurrentUserLogbookEntries = (
    params: GetCurrentUserLogbookEntriesParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserLogbookEntryDtoPaginatedList>(
      {url: `/api/logbook`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCurrentUserLogbookEntriesQueryKey = (params: GetCurrentUserLogbookEntriesParams,) => {
    return [`/api/logbook`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCurrentUserLogbookEntriesQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError = ErrorType<ProblemDetails>>(params: GetCurrentUserLogbookEntriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserLogbookEntriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>> = ({ signal }) => getCurrentUserLogbookEntries(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentUserLogbookEntriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>>
export type GetCurrentUserLogbookEntriesQueryError = ErrorType<ProblemDetails>


export function useGetCurrentUserLogbookEntries<TData = Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError = ErrorType<ProblemDetails>>(
 params: GetCurrentUserLogbookEntriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentUserLogbookEntries<TData = Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError = ErrorType<ProblemDetails>>(
 params: GetCurrentUserLogbookEntriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentUserLogbookEntries<TData = Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError = ErrorType<ProblemDetails>>(
 params: GetCurrentUserLogbookEntriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCurrentUserLogbookEntries<TData = Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError = ErrorType<ProblemDetails>>(
 params: GetCurrentUserLogbookEntriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserLogbookEntries>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCurrentUserLogbookEntriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getLogbookEntryDetailsById = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<LogbookEntryDto>(
      {url: `/api/logbook/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLogbookEntryDetailsByIdQueryKey = (id: number,) => {
    return [`/api/logbook/${id}`] as const;
    }

    
export const getGetLogbookEntryDetailsByIdQueryOptions = <TData = Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError = ErrorType<ProblemDetails | void>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLogbookEntryDetailsByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogbookEntryDetailsById>>> = ({ signal }) => getLogbookEntryDetailsById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLogbookEntryDetailsByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLogbookEntryDetailsById>>>
export type GetLogbookEntryDetailsByIdQueryError = ErrorType<ProblemDetails | void>


export function useGetLogbookEntryDetailsById<TData = Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError = ErrorType<ProblemDetails | void>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLogbookEntryDetailsById>>,
          TError,
          Awaited<ReturnType<typeof getLogbookEntryDetailsById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLogbookEntryDetailsById<TData = Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError = ErrorType<ProblemDetails | void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLogbookEntryDetailsById>>,
          TError,
          Awaited<ReturnType<typeof getLogbookEntryDetailsById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLogbookEntryDetailsById<TData = Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError = ErrorType<ProblemDetails | void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetLogbookEntryDetailsById<TData = Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError = ErrorType<ProblemDetails | void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLogbookEntryDetailsById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLogbookEntryDetailsByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateExistingLogbookEntry = (
    id: number,
    updateLogbookEntryCommand: UpdateLogbookEntryCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      const formData = new FormData();
if(updateLogbookEntryCommand.id !== undefined) {
 formData.append(`id`, updateLogbookEntryCommand.id.toString())
 }
if(updateLogbookEntryCommand.image !== undefined && updateLogbookEntryCommand.image !== null) {
 formData.append(`image`, updateLogbookEntryCommand.image)
 }
if(updateLogbookEntryCommand.removeCurrentImage !== undefined) {
 formData.append(`removeCurrentImage`, updateLogbookEntryCommand.removeCurrentImage.toString())
 }
if(updateLogbookEntryCommand.catchTime !== undefined && updateLogbookEntryCommand.catchTime !== null) {
 formData.append(`catchTime`, updateLogbookEntryCommand.catchTime)
 }
if(updateLogbookEntryCommand.lengthInCm !== undefined && updateLogbookEntryCommand.lengthInCm !== null) {
 formData.append(`lengthInCm`, updateLogbookEntryCommand.lengthInCm.toString())
 }
if(updateLogbookEntryCommand.weightInKg !== undefined && updateLogbookEntryCommand.weightInKg !== null) {
 formData.append(`weightInKg`, updateLogbookEntryCommand.weightInKg.toString())
 }
if(updateLogbookEntryCommand.notes !== undefined && updateLogbookEntryCommand.notes !== null) {
 formData.append(`notes`, updateLogbookEntryCommand.notes)
 }
if(updateLogbookEntryCommand.fishSpeciesId !== undefined && updateLogbookEntryCommand.fishSpeciesId !== null) {
 formData.append(`fishSpeciesId`, updateLogbookEntryCommand.fishSpeciesId.toString())
 }
if(updateLogbookEntryCommand.fisheryId !== undefined && updateLogbookEntryCommand.fisheryId !== null) {
 formData.append(`fisheryId`, updateLogbookEntryCommand.fisheryId.toString())
 }

      return customInstance<void>(
      {url: `/api/logbook/${id}`, method: 'PUT',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getUpdateExistingLogbookEntryMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingLogbookEntry>>, TError,{id: number;data: UpdateLogbookEntryCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateExistingLogbookEntry>>, TError,{id: number;data: UpdateLogbookEntryCommand}, TContext> => {

const mutationKey = ['updateExistingLogbookEntry'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateExistingLogbookEntry>>, {id: number;data: UpdateLogbookEntryCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  updateExistingLogbookEntry(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateExistingLogbookEntryMutationResult = NonNullable<Awaited<ReturnType<typeof updateExistingLogbookEntry>>>
    export type UpdateExistingLogbookEntryMutationBody = UpdateLogbookEntryCommand
    export type UpdateExistingLogbookEntryMutationError = ErrorType<HttpValidationProblemDetails | ProblemDetails>

    export const useUpdateExistingLogbookEntry = <TError = ErrorType<HttpValidationProblemDetails | ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingLogbookEntry>>, TError,{id: number;data: UpdateLogbookEntryCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateExistingLogbookEntry>>,
        TError,
        {id: number;data: UpdateLogbookEntryCommand},
        TContext
      > => {

      const mutationOptions = getUpdateExistingLogbookEntryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteExistingLogbookEntry = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/logbook/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteExistingLogbookEntryMutationOptions = <TError = ErrorType<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteExistingLogbookEntry>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteExistingLogbookEntry>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteExistingLogbookEntry'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteExistingLogbookEntry>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteExistingLogbookEntry(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteExistingLogbookEntryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteExistingLogbookEntry>>>
    
    export type DeleteExistingLogbookEntryMutationError = ErrorType<ProblemDetails>

    export const useDeleteExistingLogbookEntry = <TError = ErrorType<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteExistingLogbookEntry>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteExistingLogbookEntry>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteExistingLogbookEntryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    