/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Fishio API
 * OpenAPI spec version: v1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '../axios';
import type {
  CategoryDefinitionDto,
  EnumValueDto,
  FishSpeciesDto,
  GetGlobalCategoryDefinitionsParams
} from '../models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAllFishSpecies = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<FishSpeciesDto[]>({ url: `/api/lookup/fish-species`, method: 'GET', signal }, options);
};

export const getGetAllFishSpeciesQueryKey = () => {
  return [`/api/lookup/fish-species`] as const;
};

export const getGetAllFishSpeciesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllFishSpecies>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFishSpecies>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllFishSpeciesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllFishSpecies>>> = ({ signal }) =>
    getAllFishSpecies(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllFishSpecies>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllFishSpeciesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllFishSpecies>>>;
export type GetAllFishSpeciesQueryError = unknown;

export function useGetAllFishSpecies<TData = Awaited<ReturnType<typeof getAllFishSpecies>>, TError = unknown>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFishSpecies>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllFishSpecies>>,
          TError,
          Awaited<ReturnType<typeof getAllFishSpecies>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllFishSpecies<TData = Awaited<ReturnType<typeof getAllFishSpecies>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFishSpecies>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllFishSpecies>>,
          TError,
          Awaited<ReturnType<typeof getAllFishSpecies>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllFishSpecies<TData = Awaited<ReturnType<typeof getAllFishSpecies>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFishSpecies>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllFishSpecies<TData = Awaited<ReturnType<typeof getAllFishSpecies>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFishSpecies>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllFishSpeciesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGlobalCategoryDefinitions = (
  params?: GetGlobalCategoryDefinitionsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CategoryDefinitionDto[]>(
    { url: `/api/lookup/category-definitions`, method: 'GET', params, signal },
    options
  );
};

export const getGetGlobalCategoryDefinitionsQueryKey = (params?: GetGlobalCategoryDefinitionsParams) => {
  return [`/api/lookup/category-definitions`, ...(params ? [params] : [])] as const;
};

export const getGetGlobalCategoryDefinitionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>,
  TError = unknown
>(
  params?: GetGlobalCategoryDefinitionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGlobalCategoryDefinitionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>> = ({ signal }) =>
    getGlobalCategoryDefinitions(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGlobalCategoryDefinitionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>
>;
export type GetGlobalCategoryDefinitionsQueryError = unknown;

export function useGetGlobalCategoryDefinitions<
  TData = Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>,
  TError = unknown
>(
  params: undefined | GetGlobalCategoryDefinitionsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>,
          TError,
          Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetGlobalCategoryDefinitions<
  TData = Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>,
  TError = unknown
>(
  params?: GetGlobalCategoryDefinitionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>,
          TError,
          Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetGlobalCategoryDefinitions<
  TData = Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>,
  TError = unknown
>(
  params?: GetGlobalCategoryDefinitionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetGlobalCategoryDefinitions<
  TData = Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>,
  TError = unknown
>(
  params?: GetGlobalCategoryDefinitionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getGlobalCategoryDefinitions>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetGlobalCategoryDefinitionsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Pobiera warto≈õci dla enuma CategoryType
 */
export const getCategoryTypeEnumValues = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EnumValueDto[]>({ url: `/api/lookup/enums/category-types`, method: 'GET', signal }, options);
};

export const getGetCategoryTypeEnumValuesQueryKey = () => {
  return [`/api/lookup/enums/category-types`] as const;
};

export const getGetCategoryTypeEnumValuesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoryTypeEnumValues>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryTypeEnumValues>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoryTypeEnumValuesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryTypeEnumValues>>> = ({ signal }) =>
    getCategoryTypeEnumValues(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoryTypeEnumValues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryTypeEnumValuesQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoryTypeEnumValues>>>;
export type GetCategoryTypeEnumValuesQueryError = unknown;

export function useGetCategoryTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryTypeEnumValues>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryTypeEnumValues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryTypeEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCategoryTypeEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCategoryTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryTypeEnumValues>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryTypeEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCategoryTypeEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCategoryTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryTypeEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Pobiera warto≈õci dla enuma CategoryType
 */

export function useGetCategoryTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryTypeEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCategoryTypeEnumValuesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Pobiera warto≈õci dla enuma CategoryMetric
 */
export const getCategoryMetricEnumValues = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<EnumValueDto[]>({ url: `/api/lookup/enums/category-metrics`, method: 'GET', signal }, options);
};

export const getGetCategoryMetricEnumValuesQueryKey = () => {
  return [`/api/lookup/enums/category-metrics`] as const;
};

export const getGetCategoryMetricEnumValuesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoryMetricEnumValues>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryMetricEnumValues>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoryMetricEnumValuesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryMetricEnumValues>>> = ({ signal }) =>
    getCategoryMetricEnumValues(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoryMetricEnumValues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryMetricEnumValuesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoryMetricEnumValues>>
>;
export type GetCategoryMetricEnumValuesQueryError = unknown;

export function useGetCategoryMetricEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryMetricEnumValues>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryMetricEnumValues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryMetricEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCategoryMetricEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCategoryMetricEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryMetricEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryMetricEnumValues>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryMetricEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCategoryMetricEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCategoryMetricEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryMetricEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryMetricEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Pobiera warto≈õci dla enuma CategoryMetric
 */

export function useGetCategoryMetricEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryMetricEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryMetricEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCategoryMetricEnumValuesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Pobiera warto≈õci dla enuma CategoryCalculationLogic
 */
export const getCategoryCalculationLogicEnumValues = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<EnumValueDto[]>(
    { url: `/api/lookup/enums/category-calculation-logics`, method: 'GET', signal },
    options
  );
};

export const getGetCategoryCalculationLogicEnumValuesQueryKey = () => {
  return [`/api/lookup/enums/category-calculation-logics`] as const;
};

export const getGetCategoryCalculationLogicEnumValuesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoryCalculationLogicEnumValuesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>> = ({ signal }) =>
    getCategoryCalculationLogicEnumValues(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryCalculationLogicEnumValuesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>
>;
export type GetCategoryCalculationLogicEnumValuesQueryError = unknown;

export function useGetCategoryCalculationLogicEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCategoryCalculationLogicEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCategoryCalculationLogicEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Pobiera warto≈õci dla enuma CategoryCalculationLogic
 */

export function useGetCategoryCalculationLogicEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryCalculationLogicEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCategoryCalculationLogicEnumValuesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Pobiera warto≈õci dla enuma CategoryEntityType
 */
export const getCategoryEntityTypeEnumValues = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<EnumValueDto[]>(
    { url: `/api/lookup/enums/category-entity-types`, method: 'GET', signal },
    options
  );
};

export const getGetCategoryEntityTypeEnumValuesQueryKey = () => {
  return [`/api/lookup/enums/category-entity-types`] as const;
};

export const getGetCategoryEntityTypeEnumValuesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoryEntityTypeEnumValuesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>> = ({ signal }) =>
    getCategoryEntityTypeEnumValues(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryEntityTypeEnumValuesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>
>;
export type GetCategoryEntityTypeEnumValuesQueryError = unknown;

export function useGetCategoryEntityTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCategoryEntityTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCategoryEntityTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Pobiera warto≈õci dla enuma CategoryEntityType
 */

export function useGetCategoryEntityTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryEntityTypeEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCategoryEntityTypeEnumValuesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Pobiera warto≈õci dla enuma CompetitionStatus
 */
export const getCompetitionStatusEnumValues = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<EnumValueDto[]>(
    { url: `/api/lookup/enums/competition-statuses`, method: 'GET', signal },
    options
  );
};

export const getGetCompetitionStatusEnumValuesQueryKey = () => {
  return [`/api/lookup/enums/competition-statuses`] as const;
};

export const getGetCompetitionStatusEnumValuesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompetitionStatusEnumValuesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>> = ({ signal }) =>
    getCompetitionStatusEnumValues(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompetitionStatusEnumValuesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>
>;
export type GetCompetitionStatusEnumValuesQueryError = unknown;

export function useGetCompetitionStatusEnumValues<
  TData = Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCompetitionStatusEnumValues<
  TData = Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCompetitionStatusEnumValues<
  TData = Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Pobiera warto≈õci dla enuma CompetitionStatus
 */

export function useGetCompetitionStatusEnumValues<
  TData = Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionStatusEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCompetitionStatusEnumValuesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Pobiera warto≈õci dla enuma CompetitionType
 */
export const getCompetitionTypeEnumValues = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<EnumValueDto[]>({ url: `/api/lookup/enums/competition-type`, method: 'GET', signal }, options);
};

export const getGetCompetitionTypeEnumValuesQueryKey = () => {
  return [`/api/lookup/enums/competition-type`] as const;
};

export const getGetCompetitionTypeEnumValuesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompetitionTypeEnumValuesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>> = ({ signal }) =>
    getCompetitionTypeEnumValues(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompetitionTypeEnumValuesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>
>;
export type GetCompetitionTypeEnumValuesQueryError = unknown;

export function useGetCompetitionTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCompetitionTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCompetitionTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Pobiera warto≈õci dla enuma CompetitionType
 */

export function useGetCompetitionTypeEnumValues<
  TData = Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompetitionTypeEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCompetitionTypeEnumValuesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Pobiera warto≈õci dla enuma ParticipantRole
 */
export const getParticipantRoleEnumValues = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<EnumValueDto[]>({ url: `/api/lookup/enums/participant-role`, method: 'GET', signal }, options);
};

export const getGetParticipantRoleEnumValuesQueryKey = () => {
  return [`/api/lookup/enums/participant-role`] as const;
};

export const getGetParticipantRoleEnumValuesQueryOptions = <
  TData = Awaited<ReturnType<typeof getParticipantRoleEnumValues>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipantRoleEnumValues>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetParticipantRoleEnumValuesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getParticipantRoleEnumValues>>> = ({ signal }) =>
    getParticipantRoleEnumValues(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getParticipantRoleEnumValues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParticipantRoleEnumValuesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParticipantRoleEnumValues>>
>;
export type GetParticipantRoleEnumValuesQueryError = unknown;

export function useGetParticipantRoleEnumValues<
  TData = Awaited<ReturnType<typeof getParticipantRoleEnumValues>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipantRoleEnumValues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParticipantRoleEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getParticipantRoleEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetParticipantRoleEnumValues<
  TData = Awaited<ReturnType<typeof getParticipantRoleEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipantRoleEnumValues>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParticipantRoleEnumValues>>,
          TError,
          Awaited<ReturnType<typeof getParticipantRoleEnumValues>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetParticipantRoleEnumValues<
  TData = Awaited<ReturnType<typeof getParticipantRoleEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipantRoleEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Pobiera warto≈õci dla enuma ParticipantRole
 */

export function useGetParticipantRoleEnumValues<
  TData = Awaited<ReturnType<typeof getParticipantRoleEnumValues>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getParticipantRoleEnumValues>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetParticipantRoleEnumValuesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
