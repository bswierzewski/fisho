/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Fishio API
 * OpenAPI spec version: v1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '../axios';
import type { ErrorType } from '../axios';
import type { Void } from '../models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getResultsByToken = (
  token: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Void>({ url: `/api/results/${token}`, method: 'GET', signal }, options);
};

export const getGetResultsByTokenQueryKey = (token: string) => {
  return [`/api/results/${token}`] as const;
};

export const getGetResultsByTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof getResultsByToken>>,
  TError = ErrorType<unknown>
>(
  token: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsByToken>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetResultsByTokenQueryKey(token);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getResultsByToken>>> = ({ signal }) =>
    getResultsByToken(token, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!token, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getResultsByToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetResultsByTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getResultsByToken>>>;
export type GetResultsByTokenQueryError = ErrorType<unknown>;

export function useGetResultsByToken<
  TData = Awaited<ReturnType<typeof getResultsByToken>>,
  TError = ErrorType<unknown>
>(
  token: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsByToken>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResultsByToken>>,
          TError,
          Awaited<ReturnType<typeof getResultsByToken>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetResultsByToken<
  TData = Awaited<ReturnType<typeof getResultsByToken>>,
  TError = ErrorType<unknown>
>(
  token: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsByToken>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResultsByToken>>,
          TError,
          Awaited<ReturnType<typeof getResultsByToken>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetResultsByToken<
  TData = Awaited<ReturnType<typeof getResultsByToken>>,
  TError = ErrorType<unknown>
>(
  token: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsByToken>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetResultsByToken<
  TData = Awaited<ReturnType<typeof getResultsByToken>>,
  TError = ErrorType<unknown>
>(
  token: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsByToken>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetResultsByTokenQueryOptions(token, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
